package es.sysmap.interflex.model.bdc;
import es.sysmap.interflex.model.bdc.common.FlexiDate;

import es.sysmap.interflex.model.dmc.AppModuleImpl;
import es.sysmap.interflex.model.dmc.SgatipobultoParamViewRowImpl;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import javax.swing.DefaultListModel;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
import org.apache.log4j.Logger;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class SgabultoImpl extends EntityImpl 
{
  public static final int IDDOC = 0;
  public static final int IDBULTO = 1;
  public static final int PESO = 2;
  public static final int CREATEDBY = 3;
  public static final int MODIFIEDBY = 4;
  public static final int CREATEDON = 5;
  public static final int MODIFIEDON = 6;
  public static final int IDPUESTO = 7;
  public static final int DETALLES = 8;
  public static final int IMPRIMIR = 9;
  public static final int ALTO = 10;
  public static final int ANCHO = 11;
  public static final int IDTIPOBULTO = 12;
  public static final int LARGO = 13;
  public static final int PESOCONT = 14;
  public static final int RAMONEDACB = 15;
  public static final int SGAPUESTOMANIP = 16;
  public static final int SGACDOC = 17;
  public static final int SGACDOC1 = 18;
  public static final int SGACDOC2 = 19;
  public static final int SGATIPOBULTO = 20;
  public static final int SGACDOC3 = 21;
  public static final int SGATIPOBULTO1 = 22;
  public static final int SGALBULTO = 23;
  private Logger LOG = Logger.getLogger(getClass());
  










































































  private static SgabultoDefImpl mDefinitionObject;

  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public SgabultoImpl()
  {
  }

  /**
   * 
   *  Retrieves the definition object for this instance class.
   */
  public static synchronized EntityDefImpl getDefinitionObject()
  {
    if (mDefinitionObject == null)
    {
      mDefinitionObject = (SgabultoDefImpl)EntityDefImpl.findDefObject("es.sysmap.interflex.model.bdc.Sgabulto");
    }
    return mDefinitionObject;
  }











































































  /**
   * 
   *  Gets the attribute value for Idbulto, using the alias name Idbulto
   */
  public Number getIdbulto()
  {
    return (Number)getAttributeInternal(IDBULTO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Idbulto
   */
  public void setIdbulto(Number value)
  {
    setAttributeInternal(IDBULTO, value);
    // Michael 13.09.2017 Si el bulto es de Ramoneda, entonces inicializa el código de barras
    if (value != null)
    {
      if (getSgacdoc().isRamoneda())
      {
        setRamonedacb(getRamonedaBarcode());
      }
      
    }
  }

  /**
   * 
   *  Gets the attribute value for Peso, using the alias name Peso
   */
  public Number getPeso()
  {
    return (Number)getAttributeInternal(PESO);
  }




  /**
   * 
   *  getAttrInvokeAccessor: generated method. Do not modify.
   */
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case IDDOC:
        return getIddoc();
      case IDBULTO:
        return getIdbulto();
      case PESO:
        return getPeso();
      case CREATEDBY:
        return getCreatedby();
      case MODIFIEDBY:
        return getModifiedby();
      case CREATEDON:
        return getCreatedon();
      case MODIFIEDON:
        return getModifiedon();
      case IDPUESTO:
        return getIdpuesto();
      case DETALLES:
        return getDetalles();
      case IMPRIMIR:
        return getImprimir();
      case ALTO:
        return getAlto();
      case ANCHO:
        return getAncho();
      case IDTIPOBULTO:
        return getIdtipobulto();
      case LARGO:
        return getLargo();
      case PESOCONT:
        return getPesocont();
      case RAMONEDACB:
        return getRamonedacb();
      case SGALBULTO:
        return getSgalbulto();
      case SGAPUESTOMANIP:
        return getSgapuestomanip();
      case SGACDOC:
        return getSgacdoc();
      case SGACDOC1:
        return getSgacdoc1();
      case SGACDOC2:
        return getSgacdoc2();
      case SGATIPOBULTO:
        return getSgatipobulto();
      case SGACDOC3:
        return getSgacdoc3();
      case SGATIPOBULTO1:
        return getSgatipobulto1();
      default:
        return super.getAttrInvokeAccessor(index, attrDef);
      }
  }

  /**
   * 
   *  setAttrInvokeAccessor: generated method. Do not modify.
   */
  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case IDDOC:
        setIddoc((Number)value);
        return;
      case IDBULTO:
        setIdbulto((Number)value);
        return;
      case IDPUESTO:
        setIdpuesto((String)value);
        return;
      case IMPRIMIR:
        setImprimir((String)value);
        return;
      case ALTO:
        setAlto((Number)value);
        return;
      case ANCHO:
        setAncho((Number)value);
        return;
      case IDTIPOBULTO:
        setIdtipobulto((String)value);
        return;
      case LARGO:
        setLargo((Number)value);
        return;
      case PESOCONT:
        setPesocont((Number)value);
        return;
      case RAMONEDACB:
        setRamonedacb((String)value);
        return;
      default:
        super.setAttrInvokeAccessor(index, value, attrDef);
        return;
      }
  }


  /**
   * 
   *  Gets the associated entity oracle.jbo.RowIterator
   */
  public RowIterator getSgalbulto()
  {
    return (RowIterator)getAttributeInternal(SGALBULTO);
  }


  /**
   * 
   *  Gets the attribute value for Createdby, using the alias name Createdby
   */
  public String getCreatedby()
  {
    return (String)getAttributeInternal(CREATEDBY);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Createdby
   */
  public void setCreatedby(String value)
  {
    setAttributeInternal(CREATEDBY, value);
  }

  /**
   * 
   *  Gets the attribute value for Modifiedby, using the alias name Modifiedby
   */
  public String getModifiedby()
  {
    return (String)getAttributeInternal(MODIFIEDBY);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Modifiedby
   */
  public void setModifiedby(String value)
  {
    setAttributeInternal(MODIFIEDBY, value);
  }

  /**
   * 
   *  Gets the attribute value for Createdon, using the alias name Createdon
   */
  public FlexiDate getCreatedon()
  {
    return (FlexiDate)getAttributeInternal(CREATEDON);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Createdon
   */
  public void setCreatedon(FlexiDate value)
  {
    setAttributeInternal(CREATEDON, value);
  }

  /**
   * 
   *  Gets the attribute value for Modifiedon, using the alias name Modifiedon
   */
  public FlexiDate getModifiedon()
  {
    return (FlexiDate)getAttributeInternal(MODIFIEDON);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Modifiedon
   */
  public void setModifiedon(FlexiDate value)
  {
    setAttributeInternal(MODIFIEDON, value);
  }


  /**
   * 
   *  Gets the attribute value for Idpuesto, using the alias name Idpuesto
   */
  public String getIdpuesto()
  {
    return (String)getAttributeInternal(IDPUESTO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Idpuesto
   */
  public void setIdpuesto(String value)
  {
    setAttributeInternal(IDPUESTO, value);
  }


  /**
   * 
   *  Gets the associated entity SgapuestomanipImpl
   */
  public SgapuestomanipImpl getSgapuestomanip()
  {
    return (SgapuestomanipImpl)getAttributeInternal(SGAPUESTOMANIP);
  }

  /**
   * 
   *  Sets <code>value</code> as the associated entity SgapuestomanipImpl
   */
  public void setSgapuestomanip(SgapuestomanipImpl value)
  {
    setAttributeInternal(SGAPUESTOMANIP, value);
  }


  /**
   * 
   *  Gets the attribute value for Iddoc, using the alias name Iddoc
   */
  public Number getIddoc()
  {
    return (Number)getAttributeInternal(IDDOC);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Iddoc
   */
  public void setIddoc(Number value)
  {
    setAttributeInternal(IDDOC, value);
  }


  /**
   * 
   *  Gets the attribute value for Detalles, using the alias name Detalles
   */
  public Number getDetalles()
  {
    return (Number)getAttributeInternal(DETALLES);
  }


  /**
   * 
   *  Gets the associated entity SgacdocImpl
   */
  public SgacdocImpl getSgacdoc()
  {
    return (SgacdocImpl)getAttributeInternal(SGACDOC);
  }

  /**
   * 
   *  Sets <code>value</code> as the associated entity SgacdocImpl
   */
  public void setSgacdoc(SgacdocImpl value)
  {
    setAttributeInternal(SGACDOC, value);
  }
/**
   * 
   * @param idMac
   * @param cantot
   * @param idart
   * @param idpuesto
   */
  public void crearLineaDetallTrasllat(String idpuesto, String idart, Number cantot, String idMac)
  {
       RowIterator linies = getSgacdoc().getSgaldoc();
    
    SgaldocImpl nouldoc = (SgaldocImpl)linies.createRow();

  
    nouldoc.setIdart(idart);
    nouldoc.setCantot(cantot);
    nouldoc.setCanpen(cantot);
    nouldoc.setCanres(new Number(0));
    
    
    
    linies.insertRow(nouldoc);
    
    nouldoc.reservarSalida(idMac, cantot, getIdbulto(), "S"); // El movimiento
    
    
    
    // Creem lbulto
    SgalbultoImpl noulbulto = (SgalbultoImpl)getSgalbulto().createRow();
    noulbulto.setIddoc(this.getIddoc());
    noulbulto.setIdlin(nouldoc.getIdlin());
    noulbulto.setCantot(cantot);
    noulbulto.setCanpen(cantot);
    getSgalbulto().insertRow(noulbulto);
    
    // Assignem el puesto al bulto
    setIdpuesto(idpuesto);
    
    getDBTransaction().postChanges();
  }

  /**
   * Inserta una nova linea de detall pel bulto
   */
  public Key crearLineaDetall(String idpuesto, String idart, Number cantot)
  {
    RowIterator linies = getSgacdoc().getSgaldoc();
    
    // Xavi, 08/03/05: Hi ha problemes a l'hora de crear conjuntament ldoc i lbulto
    // des de la vista ldocEntrades, així que es creen per separat
    // Creem ldoc
    SgaldocImpl nouldoc = (SgaldocImpl)linies.createRow();
    nouldoc.setIdart(idart);
    nouldoc.setCantot(cantot);
    nouldoc.setCanpen(cantot);

    linies.insertRow(nouldoc);
    
    
    
    // Creem lbulto
    SgalbultoImpl noulbulto = (SgalbultoImpl)getSgalbulto().createRow();
    noulbulto.setIddoc(this.getIddoc());
    noulbulto.setIdlin(nouldoc.getIdlin());
    noulbulto.setCantot(cantot);
    noulbulto.setCanpen(cantot);
    getSgalbulto().insertRow(noulbulto);
    
    // Assignem el puesto al bulto
    setIdpuesto(idpuesto);
    
    getDBTransaction().postChanges();
    Object [] obj = {getIdbulto(), getIddoc(), nouldoc.getIdlin()};
    
    Key key = new Key(obj);
    return key;
  }


  /**
   * 
   *  Add attribute defaulting logic in this method.
   */
  protected void create(AttributeList attributeList)
  {
    super.create(attributeList);
    
    if (getIdbulto() == null)
    {
      //Calculem el seguent numero de bulto
      Number i = new Number(0);
      if (getSgacdoc() != null)
      {
        RowIterator bultos = this.getSgacdoc().getSgabulto();
        SgabultoImpl bulto = (SgabultoImpl)bultos.first();
        for (;bulto != null;)
        {
          if(i.compareTo(bulto.getIdbulto()) < 0)
            i = bulto.getIdbulto();
            bulto = (SgabultoImpl)bultos.next ();
        }
      }  
      setIdbulto(i.add(1));
    }
  }


  /**
   * Afegeix el material de sortida al bulto en una nova linia de lbulto, o a
   * una ja existent amb la mateixa clau
   * @param cantot
   * @param idart
   * @param idlin
   */
  public void afegirABultoSortida(Number idlin, String idart, Number cantot, Number pes, boolean absolut)
  {
    Object [] obj = {getIdbulto(), getIddoc(), idlin};
    Key key = new Key(obj);
    Row [] rows = getSgalbulto().findByKey(key, 1);
    if (rows != null && rows.length > 0)
    {
      SgalbultoImpl lbulto = (SgalbultoImpl)((ViewRowImpl)rows[0]).getEntity(0);  
      if (!absolut)
      {
        // cantidades parciales
        lbulto.setCantot(lbulto.getCantot().add(cantot));     
        lbulto.setPeso(lbulto.getPeso().add(pes));
      }
      else
      {
        // cantidades totales
        lbulto.setCantot(cantot);     
        lbulto.setPeso(pes);

      }
      // Retrieve cantot, may be needed below
      cantot = lbulto.getCantot();

    }
    else
    {
      SgalbultoImpl noulbulto = (SgalbultoImpl)getSgalbulto().createRow();
      noulbulto.setIddoc(this.getIddoc());
      noulbulto.setIdlin(idlin);
      noulbulto.setCantot(cantot);
      noulbulto.setPeso(pes);
      
    
      getSgalbulto().insertRow(noulbulto);
      
      
    }
      // Veure si podem trobar tipus d'embalum, dimensions, i pes per comanda d'export,
      SgacdocImpl cdoc = getSgacdoc();
      if (cdoc.isExport()) 
      {
          AppModuleImpl appModule = (AppModuleImpl)getDBTransaction().getRootApplicationModule();
          
          SgatipobultoParamViewRowImpl row = appModule.getSgatipobultoRow(idart, cantot);
          if (row != null) 
          {
            setAlto(row.getAlto());
            setAncho(row.getAncho());
            setLargo(row.getLargo());
            setPesocont(row.getPeso());
            setIdtipobulto(row.getIdtip());
          }
          
      }

  }


  /**
   * Treu la linea de bulto del bulto
   * @param cantot
   * @param idart
   * @param idlin
   */
  public void treureDeBultoSortida(Number idlin)
  {
    Object [] obj = {getIdbulto(), getIddoc(), idlin};
    Key key = new Key(obj);
    Row [] rows = getSgalbulto().findByKey(key, 1);
    if (rows != null && rows.length > 0)
    {
      SgalbultoImpl lbulto = (SgalbultoImpl)((ViewRowImpl)rows[0]).getEntity(0);  
      lbulto.remove();
    }
    // Si no queden lbultos, esborrem el bulto
    if (getSgalbulto().getRowCount() == 0)
      remove();
  }
  
  
    public static double round2(double num) {
    double result = num * 100;
    result = Math.round(result);
    result = result / 100;
    return result;
}
  
  public void modCantLineaBultoSortida (Number idlin, int cantTreta)
  {
    Object [] obj = {getIdbulto(), getIddoc(), idlin};
    Key key = new Key(obj);
    Row [] rows = getSgalbulto().findByKey(key, 1);
    if (rows != null && rows.length > 0)
    {
      SgalbultoImpl lbulto = (SgalbultoImpl)((ViewRowImpl)rows[0]).getEntity(0);  
      if (lbulto.getCantot().intValue() <= cantTreta)
      {
        lbulto.remove();
        if (getSgalbulto().getRowCount() == 0)
          remove();
      }
      else
      {
        int cantTotal = lbulto.getCantot().intValue();
        int newCant = cantTotal - cantTreta;
        try 
        {
          lbulto.setPeso(new Number(round2(lbulto.getPeso().doubleValue() * newCant/cantTotal)));
          
        } catch (SQLException ex) 
        {
          ex.printStackTrace();
        } 
        
        lbulto.setCantot(new Number(lbulto.getCantot().intValue() - cantTreta));
      }
    }
    // Si no queden lbultos, esborrem el bulto
    
  }


  public DefaultListModel getLlistaBulto()
  {
    DefaultListModel listModel = new DefaultListModel();
    RowIterator rows = getSgalbulto();
    rows.reset();
    while (rows.hasNext())
    {
      SgalbultoImpl lbulto = (SgalbultoImpl)rows.next();
      listModel.addElement(lbulto.getIdlin() + ":" + lbulto.getSgaldoc().getIdartif() + ":"  
        + lbulto.getCantot() + ":" + ((lbulto.getPeso() != null) ? lbulto.getPeso() : new Number(0)));
    }
    return listModel;
  }

  /**
   * 
   *  Gets the associated entity SgacdocImpl
   */
  public SgacdocImpl getSgacdoc1()
  {
    return (SgacdocImpl)getAttributeInternal(SGACDOC1);
  }

  /**
   * 
   *  Sets <code>value</code> as the associated entity SgacdocImpl
   */
  public void setSgacdoc1(SgacdocImpl value)
  {
    setAttributeInternal(SGACDOC1, value);
  }


  /**
   * 
   *  Gets the associated entity SgacdocImpl
   */
  public SgacdocImpl getSgacdoc2()
  {
    return (SgacdocImpl)getAttributeInternal(SGACDOC2);
  }

  /**
   * 
   *  Sets <code>value</code> as the associated entity SgacdocImpl
   */
  public void setSgacdoc2(SgacdocImpl value)
  {
    setAttributeInternal(SGACDOC2, value);
  }


  /**
   * 
   *  Gets the attribute value for Imprimir, using the alias name Imprimir
   */
  public String getImprimir()
  {
    return (String)getAttributeInternal(IMPRIMIR);
  }
  

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Imprimir
   */
  public void setImprimir(String value)
  {
    setAttributeInternal(IMPRIMIR, value);
    // Quan es marca el bulto per imprimir, finalitzem les linies de bulto
    RowIterator lbultos = getSgalbulto();
    lbultos.reset();
    while(lbultos.hasNext())
    {
      SgalbultoImpl lbulto = (SgalbultoImpl)lbultos.next();
      lbulto.setEstado("F");
    }
    
 
      
  }
  /**
   * Confeccionar el string del código de barras de Ramoneda
   * @return cadena del código de barras
   */
  public String getRamonedaBarcode()
  {
      String codPostal = ("00000" + getSgacdoc().getCodpostal()).substring(getSgacdoc().getCodpostal().length());
      DecimalFormat bultoFormat = new DecimalFormat ("000");
      int nbulto = getIdbulto().intValue();
      String bulto = bultoFormat.format(nbulto);
      String barcodeData = codPostal + "993815"  + getSgacdoc().getExpedRamoneda() + bulto;
      return barcodeData;

  }
    





  /**
   * Retorna cert si s'ha insertat el bulto, fals en cas contrari
   * @return 
   * @param bulto
   */
  //public boolean insertarBulto(Number iddoc, ResultSet bulto) 
  public boolean insertarBulto(Number iddoc, Number bulto) 
  {
    boolean insertat = true;
    try
    {
      setIdbulto(bulto);
      setIddoc(iddoc);
      setImprimir("N");
    }
    catch(Exception ex)
    {
      LOG.error("BULTO Error inesperat: " + ex);
      insertat = false;
    }
    return insertat;
  }


  /**
   * 
   *  Gets the attribute value for Alto, using the alias name Alto
   */
  public Number getAlto()
  {
    return (Number)getAttributeInternal(ALTO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Alto
   */
  public void setAlto(Number value)
  {
    setAttributeInternal(ALTO, value);
  }

  /**
   * 
   *  Gets the attribute value for Ancho, using the alias name Ancho
   */
  public Number getAncho()
  {
    return (Number)getAttributeInternal(ANCHO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Ancho
   */
  public void setAncho(Number value)
  {
    setAttributeInternal(ANCHO, value);
  }

  /**
   * 
   *  Gets the attribute value for Idtipobulto, using the alias name Idtipobulto
   */
  public String getIdtipobulto()
  {
    return (String)getAttributeInternal(IDTIPOBULTO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Idtipobulto
   */
  public void setIdtipobulto(String value)
  {
    setAttributeInternal(IDTIPOBULTO, value);
  }

  /**
   * 
   *  Gets the attribute value for Largo, using the alias name Largo
   */
  public Number getLargo()
  {
    return (Number)getAttributeInternal(LARGO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Largo
   */
  public void setLargo(Number value)
  {
    setAttributeInternal(LARGO, value);
  }

  /**
   * 
   *  Gets the attribute value for Pesocont, using the alias name Pesocont
   */
  public Number getPesocont()
  {
    return (Number)getAttributeInternal(PESOCONT);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Pesocont
   */
  public void setPesocont(Number value)
  {
    setAttributeInternal(PESOCONT, value);
  }


  /**
   * 
   *  Gets the associated entity SgatipobultoImpl
   */
  public SgatipobultoImpl getSgatipobulto()
  {
    return (SgatipobultoImpl)getAttributeInternal(SGATIPOBULTO);
  }

  /**
   * 
   *  Sets <code>value</code> as the associated entity SgatipobultoImpl
   */
  public void setSgatipobulto(SgatipobultoImpl value)
  {
    setAttributeInternal(SGATIPOBULTO, value);
  }


  /**
   * 
   *  Gets the associated entity SgacdocImpl
   */
  public SgacdocImpl getSgacdoc3()
  {
    return (SgacdocImpl)getAttributeInternal(SGACDOC3);
  }

  /**
   * 
   *  Sets <code>value</code> as the associated entity SgacdocImpl
   */
  public void setSgacdoc3(SgacdocImpl value)
  {
    setAttributeInternal(SGACDOC3, value);
  }


  /**
   * 
   *  Gets the associated entity SgatipobultoImpl
   */
  public SgatipobultoImpl getSgatipobulto1()
  {
    return (SgatipobultoImpl)getAttributeInternal(SGATIPOBULTO1);
  }

  /**
   * 
   *  Sets <code>value</code> as the associated entity SgatipobultoImpl
   */
  public void setSgatipobulto1(SgatipobultoImpl value)
  {
    setAttributeInternal(SGATIPOBULTO1, value);
  }


  /**
   * 
   *  Gets the attribute value for Ramonedacb, using the alias name Ramonedacb
   */
  public String getRamonedacb()
  {
    return (String)getAttributeInternal(RAMONEDACB);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Ramonedacb
   */
  public void setRamonedacb(String value)
  {
    setAttributeInternal(RAMONEDACB, value);
  }

  /**
   * 
   *  Creates a Key object based on given key constituents
   */
  public static Key createPrimaryKey(Number iddoc, Number idbulto)
  {
    return new Key(new Object[] {iddoc, idbulto});
  }

























}