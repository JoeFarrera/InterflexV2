package es.sysmap.interflex.model.dmc;
import es.sysmap.interflex.model.bdc.InterflexMessageBundle;
import es.sysmap.interflex.model.dmc.SgaldocEntradesViewImpl;
import es.sysmap.interflex.model.dmc.common.AppModule;
import java.sql.SQLException;
import oracle.jbo.JboException;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.domain.Number;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class SgaEntradaManualRFRowImpl extends ViewRowImpl implements es.sysmap.interflex.model.dmc.common.SgaEntradaManualRFRow 
{
  public static final int ETIQUETA = 0;
  public static final int PASCOL = 1;
  public static final int NIVELL = 2;
  public static final int IDARTIF = 3;
  public static final int CANTOT = 4;
  public static final int DESCRIP = 5;
  public static final int IDART = 6;
  public static final int IDDOC = 7;
  public static final int IDCABNUM = 8;
  public static final int IDCABSTR = 9;
  public static final int IDLIN = 10;
  public static final int CANPEN = 11;
  public static final int IDBULTO = 12;
  public static final int POSICIO = 13;
  public static final int BLOQUEO = 14;
  public static final int TRASLLAT = 15;


  
  SgaldocEntradesViewRowImpl vldocEntradesRow = null;

  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public SgaEntradaManualRFRowImpl()
  {
  }





  /**
   * 
   *  Gets the attribute value for the calculated attribute Descrip
   */
  public String getDescrip()
  {
    return (String)getAttributeInternal(DESCRIP);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Descrip
   */
  public void setDescrip(String value)
  {
    setAttributeInternal(DESCRIP, value);
  }





  /**
   * 
   *  getAttrInvokeAccessor: generated method. Do not modify.
   */
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case ETIQUETA:
        return getEtiqueta();
      case PASCOL:
        return getPasCol();
      case NIVELL:
        return getNivell();
      case IDARTIF:
        return getIdartif();
      case CANTOT:
        return getCantot();
      case DESCRIP:
        return getDescrip();
      case IDART:
        return getIdart();
      case IDDOC:
        return getIddoc();
      case IDCABNUM:
        return getIdcabnum();
      case IDCABSTR:
        return getIdcabstr();
      case IDLIN:
        return getIdlin();
      case CANPEN:
        return getCanpen();
      case IDBULTO:
        return getIdbulto();
      case POSICIO:
        return getPosicio();
      case BLOQUEO:
        return getBloqueo();
      case TRASLLAT:
        return getTrasllat();
      default:
        return super.getAttrInvokeAccessor(index, attrDef);
      }
  }

  /**
   * 
   *  setAttrInvokeAccessor: generated method. Do not modify.
   */
  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case ETIQUETA:
        setEtiqueta((String)value);
        return;
      case PASCOL:
        setPasCol((String)value);
        return;
      case NIVELL:
        setNivell((String)value);
        return;
      case IDARTIF:
        setIdartif((String)value);
        return;
      case CANTOT:
        setCantot((Number)value);
        return;
      case DESCRIP:
        setDescrip((String)value);
        return;
      case IDART:
        setIdart((String)value);
        return;
      case IDDOC:
        setIddoc((Number)value);
        return;
      case IDCABNUM:
        setIdcabnum((String)value);
        return;
      case IDCABSTR:
        setIdcabstr((String)value);
        return;
      case IDLIN:
        setIdlin((Number)value);
        return;
      case CANPEN:
        setCanpen((Number)value);
        return;
      case IDBULTO:
        setIdbulto((Number)value);
        return;
      case POSICIO:
        setPosicio((String)value);
        return;
      case BLOQUEO:
        setBloqueo((String)value);
        return;
      case TRASLLAT:
        setTrasllat((String)value);
        return;
      default:
        super.setAttrInvokeAccessor(index, value, attrDef);
        return;
      }
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Etiqueta
   */
  public String getEtiqueta()
  {
    return (String)getAttributeInternal(ETIQUETA);
  }
  
  public String toStringEtiqueta () 
  {
    return ("Ref: " + getEtiqueta() + " Qtat: " + getCantot() + " " + getIdcabstr() + 
    " " + getIdcabnum() + "(" + getIdlin() + ") Emb: " + getIdbulto() + " Qtat: " + getCanpen());
  }
  
  public String toStringUbicació () 
  {
    return ("Ubicació: " + getPasillo() + " " + getColumna() + " " + getNivell() + " -> " + toStringEtiqueta());
  }
  
  private boolean isTrasllat()
   {
    return (getTrasllat() != null && getTrasllat().equals("S"));
  }
 
  
  public void validateEtiqueta () 
  {
    String etiqueta = getEtiqueta();
    if (etiqueta != null)
    {
    
      if (etiqueta.length() < 8) // Article (min 3) + cantidad (5)
      {
            throw new JboException(InterflexMessageBundle.class,
                           InterflexMessageBundle.ETIQUETA_ERRONEA,
                           new Object[] {"Tamany llegit: " + etiqueta.length()});

      }
      String idartif = etiqueta.substring(0, etiqueta.length() - 5);
      
      // Verifiquem que l'article existeixi
      String queryResult = getApplicationModule().getTransaction().
                      dumpQueryResult("select idart from sgaarticulo where idartif='"+
                            idartif +"'", "oracle.jbo.server.QueryDumpTab",
                            null);
      int n = queryResult.indexOf("\n")+1;
      String idart = queryResult.substring(n).trim();
      if (idart.length() == 0)
        throw new JboException(InterflexMessageBundle.class,
                               InterflexMessageBundle.ARTICLE_INEXISTENT_RF,
                               new Object[] {idartif});
      else
      {
        setIdart(idart);
        setIdartif(idartif);
        String cantidad = etiqueta.substring(idartif.length());
        try {
        setCantot(new Number(cantidad));
        }
        catch (SQLException e) 
        {
                  throw new JboException(InterflexMessageBundle.class,
                               InterflexMessageBundle.ETIQUETA_CANTNOLEGIBLE,
                               new Object[] {etiqueta});

        }
        queryResult = getApplicationModule().getTransaction().
                      dumpQueryResult("select descrip from sgaarticulo where idart='"+
                            idart +"'", "oracle.jbo.server.QueryDumpTab",
                            null);
        n = queryResult.indexOf("\n")+1;
        setDescrip( queryResult.substring(n).trim());
        
        
        // See is there a document to be associated with this
        // TODO Michael 02.01.2019 allow material entry from a traslado..
     
      SgaldocEntradesViewImpl vldocEntrades = (SgaldocEntradesViewImpl)getApplicationModule().findViewObject("SgaldocEntradesView4");
      // Open document, or new document, with canpen > 0 
     if (isTrasllat())
     {
        // If trasllat, quantity asked for should be same as what the user enters (from label read)
         vldocEntrades.setWhereClause("idart = '" + idart + 
         "' and estado in ('N', 'P') and canpen = " + getCantot() +
          " and iddoc in (select iddoc from sgacdoc, sgatipdoc " + 
          "where sgacdoc.idtipdoc = sgatipdoc.idtipdoc and sgatipdoc.idtipdoc = 'TL')" 
            );
            
        // TODO: Should be total amount - how to set??
        // vldocEntrades.setOrderByClause("abs (canpen - " + getCantot() + ") asc");    
        }
     else
      {
        vldocEntrades.setWhereClause("idart = '" + idart + 
         "' and estado in ('N', 'P') and canpen >= " + getCantot() +
          " and iddoc in (select iddoc from sgacdoc, sgatipdoc " + 
          "where sgacdoc.idtipdoc = sgatipdoc.idtipdoc and sgatipdoc.tipmov ='E' and sgatipdoc.host ='S')" 
            );
            
        // Order by canpen ascending, to finish oldest...
        vldocEntrades.setOrderByClause("abs (canpen - " + getCantot() + ") asc");
       }
      vldocEntrades.executeQuery();
      if (vldocEntrades.hasNext()) 
      {
        // init row per procesament un cop entrat la ubicació
        vldocEntradesRow = (SgaldocEntradesViewRowImpl)vldocEntrades.next();
        setIdcabnum(vldocEntradesRow.getIdcabnum());
        setIdcabstr(vldocEntradesRow.getIdcabstr());
        setIdlin(vldocEntradesRow.getIdlin()); // TODO: Hay 2 !!
        setIddoc(vldocEntradesRow.getIddoc());
        setCanpen(vldocEntradesRow.getCanpenbulto());
        if (isTrasllat())
        {
          // Si es una operació de trasllat, s'ha de traslladar la totalitat
          setCantot(vldocEntradesRow.getCanpenbulto());
        }    
        setIdbulto(vldocEntradesRow.getIdbulto());
          
      }
      else
      {
        throw new JboException(InterflexMessageBundle.class,
                     InterflexMessageBundle.DOCUMENTO_NO_ENCONTRADO,
                     new Object[] {etiqueta});
        
        
        /* Use this if decisión is to enter without a document - see how to deal with this
        vldocEntradesRow = null;
        // TODO: See what treatment is when no associated document
        setIddoc (null);
        setIdcabnum(null);
        setIdcabstr(null);
        setIdlin(null);
        setCanpen(null);
        */
      }
      
      }
    }
  
    
 
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Etiqueta
   */
  public void setEtiqueta(String value)
  {
  
    setAttributeInternal(ETIQUETA, value);
   
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Idartif
   */
  public String getIdartif()
  {
    return (String)getAttributeInternal(IDARTIF);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Idartif
   */
  public void setIdartif(String value)
  {
    setAttributeInternal(IDARTIF, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute PasCol
   */
  public String getPasCol()
  {
    return (String)getAttributeInternal(PASCOL);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute PasCol
   */
  public void setPasCol(String value)
  {
    setAttributeInternal(PASCOL, value);
  }
  
  private String getPasillo ()
  {
    if (getPasCol() != null) 
    {
      return getPasCol().substring(0, 2);
    }
    return null;
  }
  
  private String getColumna () 
  {
    if (getPasCol() != null)
    {
      return getPasCol().substring(2,4);
    }
    return null;
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Nivell
   */
  public String getNivell()
  {
    return (String)getAttributeInternal(NIVELL);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Nivell
   */
  public void setNivell(String value)
  {
    setAttributeInternal(NIVELL, value);    
  }
  
  public boolean nivellValid(String nivell) // Jaume 29/04/2016
  {
    boolean valid = true;

    if (nivell == null || nivell.length() == 0)
      valid = false;
    else 
    {
      try
      {
        int niv = Integer.parseInt(nivell);
        if (niv > 0)
        {
          if (nivell.length() < 2)
            nivell = "0" + nivell;
          setNivell (nivell);
        }
        else
        {
          valid = false;
        }
      }
      catch (NumberFormatException e)
      {
        valid = false;
      }
    }
    return valid;
  }

  public String calculaUbicacio() // Jaume 29/04/2016
  {
    String idubi = null;

    String pasillo = getPasillo();
    String columna = getColumna();
    String nivell = getNivell();
    String queryResult = getApplicationModule().getTransaction().
                         dumpQueryResult(
                         "select idubi from sgaubicacion where pasillo =" + getPasillo() +
                         " and columna =" + getColumna() + " and nivel = " + nivell +
                         " and idtipubi = 'MAN'", "oracle.jbo.server.QueryDumpTab",
                         null);
      int n = queryResult.indexOf("\n")+1;
      idubi = queryResult.substring(n).trim();
    return idubi;
  }

  public void validateNivell(String nivell) 
  {
    if (getNivell() == null || getNivell().length() == 0)
      setNivell (nivell);
   
    if (nivell != null)
    {
    
      if (nivell.length() < 2)
        nivell = "0" + nivell;
      // Verifiquem que l'ubicació existeixi
      String pasillo = getPasillo();
      String columna = getColumna();
      String queryResult = getApplicationModule().getTransaction().
                      dumpQueryResult(
                      "select idubi from sgaubicacion where pasillo =" + getPasillo()
                      + " and columna =" + getColumna() + " and nivel = " + nivell 
                      + " and idtipubi = 'MAN'", "oracle.jbo.server.QueryDumpTab",
                            null);
      int n = queryResult.indexOf("\n")+1;
      String idubi = queryResult.substring(n).trim();
      if (idubi.length() == 0)
        throw new JboException(InterflexMessageBundle.class,
                               InterflexMessageBundle.UBICACION_INEXISTENT,
                               new Object[] {"Pasillo: " + getPasillo() + " Columna: " + getColumna() + " Nivell: " + nivell});
      else
      {
        // TODO: What to do when there is no document??
        if (vldocEntradesRow != null)
        {
          vldocEntradesRow.setIdmac(getIdmacNou(pasillo, columna, nivell));
          // TODO: This must be AFTER setIdmac, which initializes the cancon to the qty. pend for the bulto for screen use
          vldocEntradesRow.setCancon(getCantot());
          vldocEntradesRow.setIntegra("S");
          vldocEntradesRow.introduirCargaNova(idubi, "MAN");
          vldocEntradesRow.introduirCargaNova(idubi, "MAN", getBloqueo(), 
            getBloqueo() == null || getBloqueo().equals("N") ? null : "Entrada RF");
          vldocEntradesRow.getApplicationModule().getTransaction().commit();
          vldocEntradesRow = null;
          }
      
      } 
    }
    else 
    {
           throw new JboException(InterflexMessageBundle.class,
                               InterflexMessageBundle.UBI_NIVELL_NULL,
                               new Object[] {"Pasillo: " + getPasillo() + " Columna: " + getColumna() + " Nivell: " + nivell});
   
    }
  }
  /**
   * Determinar el número de mac en funcion de la ubicación donde se va a meter.
   * TODO: Aquí intenta ubicar hasta 3 macs - ver que pasa cuando se ponen más...
   * @return 
   * @param nivel
   * @param columna
   * @param pasillo
   */
  private String getIdmacNou (String pasillo, String columna, String nivel) 
  {
  
    int posicion = 1;
    AppModule app = (AppModule)getApplicationModule();
    while (true) {
      
            String queryResult = app.getTransaction().
                        dumpQueryResult(
        "select '" + pasillo + "' || '" + columna + "' || '" + nivel + "' || " + " trim(to_char((select nvl(count(*),0) + " + posicion + " from sgamac where ubipos = idubi), '000009')) mac"
      + " from sgaubicacion where sgaubicacion.idtipalm = 'MAN' and  pasillo = '" + pasillo + "' and columna = '" + columna 
      + "' and nivel = '" + nivel + "'",
                        "oracle.jbo.server.QueryDumpTab",
                              null);
       int n = queryResult.indexOf("\n")+1;
       String idmac = queryResult.substring(n).trim();
      
      // TODO: 18.02.2014 This won't be correct for drive in etc..
      if (app.existsMac(idmac)) 
      {
        switch (posicion) 
        {
          case 1:
            posicion = 0;
            break;
          case 0:
            posicion = 2;
            break;
          default:
            posicion++;
          
        }
      }
      else
        return (idmac);
    }
   
  }

  private String getIdmacNouAmbPosicio (String pasillo, String columna, String nivel, int posicion) 
  {
    AppModule app = (AppModule)getApplicationModule();
    if (posicion > 0)
    {
      String queryResult = app.getTransaction().dumpQueryResult(
        "select '" + pasillo + "' || '" + columna + "' || '" + nivel + "' || trim(to_char(" + posicion + ", '000009')) from dual", "oracle.jbo.server.QueryDumpTab", null);
      int n = queryResult.indexOf("\n")+1;
      String idmac = queryResult.substring(n).trim();
      if (app.existsMac(idmac)) 
      {
        throw new JboException(InterflexMessageBundle.class,
                               InterflexMessageBundle.MAC_EXISTENT,
                               new Object[] {idmac});
      }
      else 
      {
        return(idmac);
      }
    }
    else
    {
      posicion = 1;
      while (true) 
      {
        String queryResult = app.getTransaction().dumpQueryResult(
          "select '" + pasillo + "' || '" + columna + "' || '" + nivel + "' || " + 
          " trim(to_char((select nvl(count(*),0) + " + posicion + " from sgamac where ubipos = idubi), '000009')) mac" +
          " from sgaubicacion where sgaubicacion.idtipalm = 'MAN' and  pasillo = '" + pasillo + "' and columna = '" + columna +
          "' and nivel = '" + nivel + "'", "oracle.jbo.server.QueryDumpTab", null);
        int n = queryResult.indexOf("\n")+1;
        String idmac = queryResult.substring(n).trim();
        // TODO: 18.02.2014 This won't be correct for drive in etc..
        if (app.existsMac(idmac)) 
        {
          switch (posicion) 
          {
            case 1:
              posicion = 0;
              break;
            case 0:
              posicion = 2;
              break;
            default:
              posicion++;
          }
        }
        else
          return (idmac);
      }
    } 
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Cantot
   */
  public Number getCantot()
  {
    return (Number)getAttributeInternal(CANTOT);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Cantot
   */
  public void setCantot(Number value)
  {
    setAttributeInternal(CANTOT, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Idart
   */
  public String getIdart()
  {
    return (String)getAttributeInternal(IDART);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Idart
   */
  public void setIdart(String value)
  {
    setAttributeInternal(IDART, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Iddoc
   */
  public Number getIddoc()
  {
    return (Number)getAttributeInternal(IDDOC);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Iddoc
   */
  public void setIddoc(Number value)
  {
    setAttributeInternal(IDDOC, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Idcabnum
   */
  public String getIdcabnum()
  {
    return (String)getAttributeInternal(IDCABNUM);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Idcabnum
   */
  public void setIdcabnum(String value)
  {
    setAttributeInternal(IDCABNUM, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Idcabstr
   */
  public String getIdcabstr()
  {
    return (String)getAttributeInternal(IDCABSTR);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Idcabstr
   */
  public void setIdcabstr(String value)
  {
    setAttributeInternal(IDCABSTR, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Idlin
   */
  public Number getIdlin()
  {
    return (Number)getAttributeInternal(IDLIN);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Idlin
   */
  public void setIdlin(Number value)
  {
    setAttributeInternal(IDLIN, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Canpen
   */
  public Number getCanpen()
  {
    return (Number)getAttributeInternal(CANPEN);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Canpen
   */
  public void setCanpen(Number value)
  {
    setAttributeInternal(CANPEN, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Idbulto
   */
  public Number getIdbulto()
  {
    return (Number)getAttributeInternal(IDBULTO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Idbulto
   */
  public void setIdbulto(Number value)
  {
    setAttributeInternal(IDBULTO, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Posicio
   */
  public String getPosicio()
  {
    return (String)getAttributeInternal(POSICIO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Posicio
   */
  public void setPosicio(String value)
  {
    setAttributeInternal(POSICIO, value);
  }

  public boolean posicioValida(String posicio)
  {
    boolean valida = true;
    if (posicio != null && posicio.length() > 0)
    {
      try
      {
        int pos = Integer.parseInt(posicio);
        if (pos <= 0)
          valida = false;
      } 
      catch (NumberFormatException e)
      {
        valida = false;
      }
    }
    setPosicio(posicio);
    return valida;
  }

  public void confirmarEntrada(String nivell, String posicio)
  {
    if (!nivellValid(nivell))
      if (nivell == null || nivell.length() == 0)
        throw new JboException(InterflexMessageBundle.class,
                               InterflexMessageBundle.UBI_NIVELL_NULL,
                               new Object[] {"Has informat nivell = " + nivell});
      else
        throw new JboException(InterflexMessageBundle.class,
                               InterflexMessageBundle.NIVELL_NO_NUMERO,
                               new Object[] {"Has informat nivell = " + nivell});
    else
    {
      if (!posicioValida(posicio))
        throw new JboException(InterflexMessageBundle.class,
                               InterflexMessageBundle.POSICIO_NO_NUMERO,
                               new Object[] {"Has informat posició = " + posicio});
      else
      {
        String idubi = calculaUbicacio();
        if (idubi.length() == 0)
          throw new JboException(InterflexMessageBundle.class,
                                 InterflexMessageBundle.UBICACION_INEXISTENT,
                                 new Object[] {"Pasillo: " + getPasillo() + " Columna: " + getColumna() + " Nivell: " + getNivell()});
        else
        {
          String pasillo = getPasillo();
          String columna = getColumna();
          String niv = getNivell();
          int pos = 0;
          if (posicio != null && posicio.length() > 0)
            pos = Integer.parseInt(posicio);
          if (vldocEntradesRow != null)
          {
            //vldocEntradesRow.setIdmac(getIdmacNou(pasillo, columna, nivell));
            vldocEntradesRow.setIdmac(getIdmacNouAmbPosicio(pasillo, columna, niv, pos));
            // TODO: This must be AFTER setIdmac, which initializes the cancon to the qty. pend for the bulto for screen use
            vldocEntradesRow.setCancon(getCantot());
            vldocEntradesRow.setIntegra("S");
            vldocEntradesRow.introduirCargaNova(idubi, "MAN");
            vldocEntradesRow.getApplicationModule().getTransaction().commit();
            vldocEntradesRow = null;
          }
        }
      }
    }
  }

  private String getNivell2 ()
  {
    if (getPasCol() != null) 
    {
      return getPasCol().substring(4, 6);
    }
    return null;
  }
  
  public String calculaUbicacio2()
  {
    String idubi = null;

    String pasillo = getPasillo();
    String columna = getColumna();
    String nivell = getNivell2();
    String queryResult = getApplicationModule().getTransaction().
                         dumpQueryResult(
                         "select idubi from sgaubicacion where pasillo =" + getPasillo() +
                         " and columna =" + getColumna() + " and nivel = " + nivell +
                         " and idtipubi = 'MAN'", "oracle.jbo.server.QueryDumpTab",
                         null);
      int n = queryResult.indexOf("\n")+1;
      idubi = queryResult.substring(n).trim();
    return idubi;
  }

  public void confirmarEntrada2()
  {
    // TODO Michael 02.01.2019 Adjust this in the case of putaway with pistola..
    String idubi = calculaUbicacio2();
    if (idubi.length() == 0)
      throw new JboException(InterflexMessageBundle.class,
                             InterflexMessageBundle.UBICACION_INEXISTENT,
                             new Object[] {"Pasillo: " + getPasillo() + " Columna: " + getColumna() + " Nivell: " + getNivell()});
    else
    {
      String pasillo = getPasillo();
      String columna = getColumna();
      String niv = getNivell2();
      int pos = 0;
      if (vldocEntradesRow != null)
      {
        vldocEntradesRow.setIdmac(getIdmacNouAmbPosicio(pasillo, columna, niv, pos));
        vldocEntradesRow.setCancon(getCantot());
        vldocEntradesRow.setIntegra("S");
        String bloqueo = getBloqueo();
        String motivo = null;
        if (bloqueo != null && bloqueo.equals("S"))
          motivo = "ENTRADA R/F";
        vldocEntradesRow.introduirCargaNova(idubi, "MAN", bloqueo, motivo);
        vldocEntradesRow.getApplicationModule().getTransaction().commit();
//        vldocEntradesRow.getApplicationModule().getTransaction().rollback();
        vldocEntradesRow = null;
      }
      // Michael 10.11.2017 TODO: Tratar caso de vldocEntradesRow null
    }
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Bloqueo
   */
  public String getBloqueo()
  {
    return (String)getAttributeInternal(BLOQUEO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Bloqueo
   */
  public void setBloqueo(String value)
  {
    setAttributeInternal(BLOQUEO, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Trasllat
   */
  public String getTrasllat()
  {
    return (String)getAttributeInternal(TRASLLAT);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Trasllat
   */
  public void setTrasllat(String value)
  {
    setAttributeInternal(TRASLLAT, value);
  }

}