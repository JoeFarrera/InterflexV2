package es.sysmap.interflex.model.bdc;
import es.sysmap.interflex.model.bdc.SgaposicionubicacionImpl;
import java.sql.SQLException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.domain.Number;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class SgaubicacionDefImpl extends CustomEntityDefImpl 
{
  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public SgaubicacionDefImpl()
  {
  }
  
  /**
   * Allibera una ubicació que esta pendent d'inspecció
   * @return 
   * @param referencia
   * @param iddoc
   * @param txn
   */

  public boolean alliberarUbicacio(DBTransaction txn, 
                                   String idubi, Number posicion, Number numPos) 
  {
    boolean bAlliberada = true;
    try
    {
      Object [] obj = {idubi};
      Key key = new Key(obj); 
      SgaubicacionImpl ubicacion = (SgaubicacionImpl)findByPrimaryKey(txn, key);
      if (ubicacion != null)
      {
        RowIterator rows = ubicacion.getSgaposicionubicacion();
        rows.reset();
        boolean trobat = false;
        SgaposicionubicacionImpl posicionUbicacion = null;
        while (rows.hasNext() && !trobat)
        {
          posicionUbicacion = (SgaposicionubicacionImpl)rows.next();
          if (posicionUbicacion.getPosicion().equals(posicion))
            trobat = true;
        }
        if (trobat)
          bAlliberada = ubicacion.alliberarInspeccio(posicionUbicacion, numPos);
      }
    }
    catch(Exception ex)
    {
      bAlliberada = false;
    }
    return bAlliberada;
  }  


  /**
   * Força l'extracció des de una ubicació que esta pendent d'inspecció
   * @return 
   * @param referencia
   * @param iddoc
   * @param txn
   */

  public boolean inspeccionarUbicacio(DBTransaction txn, 
                                   String idubi, Number posicion, Number numPos, String desti, String idtipmac) 
  {
    boolean bInspeccionada = true;
    try
    {
      Object [] obj = {idubi};
      Key key = new Key(obj); 
      SgaubicacionImpl ubicacion = (SgaubicacionImpl)findByPrimaryKey(txn, key);
      if (ubicacion != null)
      {
        RowIterator rows = ubicacion.getSgaposicionubicacion();
        rows.reset();
        boolean trobat = false;
        SgaposicionubicacionImpl posicionUbicacion = null;
        while (rows.hasNext() && !trobat)
        {
          posicionUbicacion = (SgaposicionubicacionImpl)rows.next();
          if (posicionUbicacion.getPosicion().equals(posicion))
            trobat = true;
        }
        if (trobat)
          bInspeccionada = ubicacion.inspeccionarUbicacio(posicionUbicacion, numPos, desti, idtipmac);
      }
    }
    catch(Exception ex)
    {
      bInspeccionada = false;
    }
    return bInspeccionada;
  }  
  
}