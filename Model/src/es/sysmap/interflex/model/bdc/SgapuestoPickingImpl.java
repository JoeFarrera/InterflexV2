package es.sysmap.interflex.model.bdc;
import es.sysmap.xml.XMLTelegrama;
import oracle.jbo.JboException;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.Key;
import oracle.xml.parser.v2.XMLNode;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class SgapuestoPickingImpl extends SgaubicacionImpl 
{
  public static final int MAXATTRCONST = EntityDefImpl.getMaxAttrConst("es.sysmap.interflex.model.bdc.Sgaubicacion");
  public static final int CAPPUL = MAXATTRCONST;
  public static final int OCUPUL = MAXATTRCONST + 1;
  public static final int POSPLC = MAXATTRCONST + 2;
  public static final int ESTADO = MAXATTRCONST + 3;
  public static final int IDTIPALM = 3;
















  private static SgaubicacionDefImpl mDefinitionObject;

  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public SgapuestoPickingImpl()
  {
  }

  /**
   * 
   *  Retrieves the definition object for this instance class.
   */
  public static synchronized EntityDefImpl getDefinitionObject()
  {
    if (mDefinitionObject == null)
    {
      mDefinitionObject = (SgaubicacionDefImpl)EntityDefImpl.findDefObject("es.sysmap.interflex.model.bdc.SgapuestoPicking");
    }
    return mDefinitionObject;
  }


















  /**
   * 
   *  Gets the attribute value for Cappul, using the alias name Cappul
   */
  public Number getCappul()
  {
    return (Number)getAttributeInternal(CAPPUL);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Cappul
   */
  public void setCappul(Number value)
  {
    setAttributeInternal(CAPPUL, value);
  }

  /**
   * 
   *  Gets the attribute value for Ocupul, using the alias name Ocupul
   */
  public Number getOcupul()
  {
    return (Number)getAttributeInternal(OCUPUL);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Ocupul
   */
  public void setOcupul(Number value)
  {
    setAttributeInternal(OCUPUL, value);
  }

  /**
   * 
   *  Gets the attribute value for Posplc, using the alias name Posplc
   */
  public Number getPosplc()
  {
    return (Number)getAttributeInternal(POSPLC);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Posplc
   */
  public void setPosplc(Number value)
  {
    setAttributeInternal(POSPLC, value);
  }

  /**
   * 
   *  getAttrInvokeAccessor: generated method. Do not modify.
   */
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception
  {
    if (index == CAPPUL)
    {
      return getCappul();
    }
    if (index == OCUPUL)
    {
      return getOcupul();
    }
    if (index == POSPLC)
    {
      return getPosplc();
    }
    if (index == IDTIPALM)
    {
      return getIdtipalm();
    }
    if (index == ESTADO)
    {
      return getEstado();
    }
    return super.getAttrInvokeAccessor(index, attrDef);
  }

  /**
   * 
   *  setAttrInvokeAccessor: generated method. Do not modify.
   */
  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception
  {
    if (index == CAPPUL)
    {
      setCappul((Number)value);
      return;
    }
    if (index == OCUPUL)
    {
      setOcupul((Number)value);
      return;
    }
    if (index == POSPLC)
    {
      setPosplc((Number)value);
      return;
    }
    if (index == ESTADO)
    {
      setEstado((String)value);
      return;
    }
    super.setAttrInvokeAccessor(index, value, attrDef);
    return;
  }





  /**
   * 
   *  Gets the attribute value for Idtipalm, using the alias name Idtipalm
   */
  public String getIdtipalm()
  {
    return (String)getAttributeInternal(IDTIPALM);
  }

  /**
   * 
   *  Gets the attribute value for Estado, using the alias name Estado
   */
  public String getEstado()
  {
    return (String)getAttributeInternal(ESTADO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Estado
   */
  public void setEstado(String value)
  {
    setAttributeInternal(ESTADO, value);
  }



  public String getTipoAlmacen()
  {
    return ("PuestoPicking");
  }



  /**
   * Si es miniload, el quitar un mac provoca que los demas se actualizan una posición
   * @param posicion
   */
  public void liberarUbicacion(SgaposicionubicacionImpl posicion, Number numPos)  
  {
    if (isPickingMiniload())
    {
      if (posicion != null)
      {
        posicion.liberarPosicion();
        // Si es posición 0, no mover los demás
        if (posicion.getPosicion().intValue() != 0)
        {
      
        int pos = posicion.getPosicion().intValue();
        RowIterator rows = getSgamacPosicion();
        rows.reset();
        while (rows.hasNext()) 
        {
          SgamacImpl mac = (SgamacImpl)rows.next();
          if (mac.getPosubipos() != null)
          {
            int curPos = mac.getPosubipos().intValue();
            if (curPos > pos)
            {
              mac.liberarPosicion();  // Liberar la posición actual
              mac.setPosubipos(new Number (curPos - 1));
            }
          }
        }
      }
    }
  }
  }
  
  
  /**
   * Para una ubicacion de picking, buscar la primera posición libre
   * <Libre> es que no tiene mac asociado
   * @return 
   */
  public SgaposicionubicacionImpl getFirstPosicionLibre()
  {
    RowIterator rows = getSgaposicionubicacion();
    rows.reset();
    SgaposicionubicacionImpl row = null;
    SgaposicionubicacionImpl rowFound = null;
    
    int curPosicion = 0;
    
    while (rows.hasNext())
    {
      row = (SgaposicionubicacionImpl)rows.next();
      // La posición 0 es para el mac saliendo del puesto
      if (row.getPosicion().intValue() > 0)
      {
        if (row.hasNoMac())
        {
          if (rowFound == null)
            rowFound = row;
          else
            if (rowFound.getPosicion().intValue() > row.getPosicion().intValue())
              rowFound = row;
        }
      }
    }
   return rowFound; 
  }

  public void ocuparUbicacion(SgaposicionubicacionImpl posicion, Number numPos)
  {
    if (posicion != null)
      posicion.ocuparPosicion();
  }


  public void reservarUbicacion(SgaposicionubicacionImpl posicion)
  {
    // TODO
  }
  
  public void quitarReservaUbicacion(SgaposicionubicacionImpl posicion)
  {
    // TODO
  }



  /**
   * Confeccionar el nodo XML correspondiente a la ubicación
   * @return 
   * @param node
   */
  public XMLNode getXMLUbicacion(XMLNode node)
  {
  try 
  {
    node.getFirstChild().setNodeValue(getPosplc().toString());
    XMLTelegrama.setValorNodo(node,"lado", "0");
    XMLTelegrama.setValorNodo(node,"columna","0");
    XMLTelegrama.setValorNodo(node,"nivel", "0");
    XMLTelegrama.setValorNodo(node,"posUbicacion", "0");
    
  } catch (Exception ex) 
  {
    LOG.error("getXMLUbicacion",ex);
  } 
    return node;
  }
  
  /*
   * Michael 30.04.2005
   * Parece que llama en condiciones ???
   * 
   */
  
  public XMLNode getXMLUbicacionEntrada(XMLNode node)
  {
    LOG.warn ("getXMLUbicacionEntrada(): " + getIdubi());
    return getXMLUbicacion(node);
  }

  
  /**
   * 
   * @return el nodo XML correspondiente al siguiente destino desde esta posición
   * Si es la entrada extra, será la mesa de entrega al pasillo 1
   * Si no, es la mesa de entrada del pasillo correspondiente a la ubicación (o el destino en caso del Miniload)
   * @param ubiDes
   * @param node
   */
  public XMLNode getXMLUbicacionSiguiente(XMLNode node, SgaubicacionImpl ubiDes)
  {
    if (getPosplc().intValue() == POSPLC_ENTRADA_EXTRA)
    {
      // Es la entrada extra
      node.getFirstChild().setNodeValue(Integer.toString(POSPLC_ENTRADA_EXTRA_MESA_PASILLO));
      XMLTelegrama.setValorNodo(node,"lado", "0");
      XMLTelegrama.setValorNodo(node,"columna","0");
      XMLTelegrama.setValorNodo(node,"nivel", "0");
      XMLTelegrama.setValorNodo(node,"posUbicacion", "0");
    }
    else 
    {
      // Será la entrada del pasillo
      node = ubiDes.getXMLUbicacionEntrada(node);
    }
    return node;
  }



  /**
   * 
   * @return el nodo XML correspondiente al siguiente destino desde esta posición
   * Si es la entrada extra, será la mesa de entrega al pasillo 1
   * Si no, es la mesa de entrada del pasillo correspondiente a la ubicación (o el destino en caso del Miniload)
   * @param ubiDes
   * @param node
   */
  public XMLNode getXMLUbicacionSiguiente(XMLNode node, SgaposicionubicacionImpl posUbiDes)
  {
    if (getPosplc().intValue() == POSPLC_ENTRADA_EXTRA)
    {
      // Está en la entrada extra
      node.getFirstChild().setNodeValue(Integer.toString(POSPLC_ENTRADA_EXTRA_MESA_PASILLO));
      XMLTelegrama.setValorNodo(node,"lado", "0");
      XMLTelegrama.setValorNodo(node,"columna","0");
      XMLTelegrama.setValorNodo(node,"nivel", "0");
      XMLTelegrama.setValorNodo(node,"posUbicacion", "0");
    }
    else 
    {
      // Será la entrada del pasillo
      posUbiDes.getXMLPosicionEntrada(node);
    }
    return node;
  }

  /**
   * 
   *  Creates a Key object based on given key constituents
   */
  public static Key createPrimaryKey(String idubi)
  {
    return new Key(new Object[] {idubi});
  }






}