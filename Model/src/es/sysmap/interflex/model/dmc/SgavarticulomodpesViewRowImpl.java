package es.sysmap.interflex.model.dmc;
import java.sql.SQLException;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.domain.Number;
import es.sysmap.interflex.model.bdc.common.FlexiDate;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class SgavarticulomodpesViewRowImpl extends ViewRowImpl implements es.sysmap.interflex.model.dmc.common.SgavarticulomodpesViewRow 
{


  public static final int IDARTIF = 0;
  public static final int DESCRIP = 1;
  public static final int CONTROLPES = 2;
  public static final int PESUNIT = 3;
  public static final int FECULTMODPES = 4;
  public static final int MODPESBY = 5;
  public static final int CANTOT = 6;
  public static final int UNIEMB = 7;
  public static final int IDMAC = 8;
  public static final int IDART1 = 9;
  public static final int MULTIREF = 10;
  public static final int IDMAC1 = 11;
  public static final int TARATEORIC = 12;
  public static final int TARAREAL = 13;
  public static final int DESCRIP1 = 14;
  public static final int IDTIPMAC = 15;
  public static final int IDART = 16;
  public static final int PESACTUAL = 17;
  public static final int PESUNITARIREAL = 18;
  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public SgavarticulomodpesViewRowImpl()
  {
  }

  /**
   * 
   *  Gets Sgaarticulo entity object.
   */
  public es.sysmap.interflex.model.bdc.SgaarticuloImpl getSgaarticulo()
  {
    return (es.sysmap.interflex.model.bdc.SgaarticuloImpl)getEntity(0);
  }

  /**
   * 
   *  Gets Sgaexistencia entity object.
   */
  public es.sysmap.interflex.model.bdc.SgaexistenciaImpl getSgaexistencia()
  {
    return (es.sysmap.interflex.model.bdc.SgaexistenciaImpl)getEntity(1);
  }

  /**
   * 
   *  Gets Sgamac entity object.
   */
  public es.sysmap.interflex.model.bdc.SgamacImpl getSgamac()
  {
    return (es.sysmap.interflex.model.bdc.SgamacImpl)getEntity(2);
  }

  /**
   * 
   *  Gets Sgatipomac entity object.
   */
  public es.sysmap.interflex.model.bdc.SgatipomacImpl getSgatipomac()
  {
    return (es.sysmap.interflex.model.bdc.SgatipomacImpl)getEntity(3);
  }

  /**
   * 
   *  Gets the attribute value for IDARTIF using the alias name Idartif
   */
  public String getIdartif()
  {
    return (String)getAttributeInternal(IDARTIF);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDARTIF using the alias name Idartif
   */
  public void setIdartif(String value)
  {
    setAttributeInternal(IDARTIF, value);
  }

  /**
   * 
   *  Gets the attribute value for DESCRIP using the alias name Descrip
   */
  public String getDescrip()
  {
    return (String)getAttributeInternal(DESCRIP);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for DESCRIP using the alias name Descrip
   */
  public void setDescrip(String value)
  {
    setAttributeInternal(DESCRIP, value);
  }

  /**
   * 
   *  Gets the attribute value for CONTROLPES using the alias name Controlpes
   */
  public String getControlpes()
  {
    return (String)getAttributeInternal(CONTROLPES);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for CONTROLPES using the alias name Controlpes
   */
  public void setControlpes(String value)
  {
    setAttributeInternal(CONTROLPES, value);
  }

  /**
   * 
   *  Gets the attribute value for PESUNIT using the alias name Pesunit
   */
  public Number getPesunit()
  {
    return (Number)getAttributeInternal(PESUNIT);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for PESUNIT using the alias name Pesunit
   */
  public void setPesunit(Number value)
  {
    setAttributeInternal(PESUNIT, value);
  }

  /**
   * 
   *  Gets the attribute value for FECULTMODPES using the alias name Fecultmodpes
   */
  public FlexiDate getFecultmodpes()
  {
    return (FlexiDate)getAttributeInternal(FECULTMODPES);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for FECULTMODPES using the alias name Fecultmodpes
   */
  public void setFecultmodpes(FlexiDate value)
  {
    setAttributeInternal(FECULTMODPES, value);
  }

  /**
   * 
   *  Gets the attribute value for MODPESBY using the alias name Modpesby
   */
  public String getModpesby()
  {
    return (String)getAttributeInternal(MODPESBY);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for MODPESBY using the alias name Modpesby
   */
  public void setModpesby(String value)
  {
    setAttributeInternal(MODPESBY, value);
  }

  /**
   * 
   *  Gets the attribute value for CANTOT using the alias name Cantot
   */
  public Number getCantot()
  {
    return (Number)getAttributeInternal(CANTOT);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for CANTOT using the alias name Cantot
   */
  public void setCantot(Number value)
  {
    setAttributeInternal(CANTOT, value);
  }

  /**
   * 
   *  Gets the attribute value for UNIEMB using the alias name Uniemb
   *  Michael : Si es null, devolvemos 1
   */
  public Number getUniemb()
  {
    Number uniemb = (Number)getAttributeInternal(UNIEMB);
    if (uniemb == null || uniemb.intValue() == 0)
      uniemb = new Number(1);
    
    return uniemb;
    
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for UNIEMB using the alias name Uniemb
   */
  public void setUniemb(Number value)
  {
    setAttributeInternal(UNIEMB, value);
  }

  /**
   * 
   *  Gets the attribute value for IDMAC using the alias name Idmac
   */
  public String getIdmac()
  {
    return (String)getAttributeInternal(IDMAC);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDMAC using the alias name Idmac
   */
  public void setIdmac(String value)
  {
    setAttributeInternal(IDMAC, value);
  }

  /**
   * 
   *  Gets the attribute value for IDART using the alias name Idart1
   */
  public String getIdart1()
  {
    return (String)getAttributeInternal(IDART1);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDART using the alias name Idart1
   */
  public void setIdart1(String value)
  {
    setAttributeInternal(IDART1, value);
  }

  /**
   * 
   *  Gets the attribute value for MULTIREF using the alias name Multiref
   */
  public String getMultiref()
  {
    return (String)getAttributeInternal(MULTIREF);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for MULTIREF using the alias name Multiref
   */
  public void setMultiref(String value)
  {
    setAttributeInternal(MULTIREF, value);
  }

  /**
   * 
   *  Gets the attribute value for IDMAC using the alias name Idmac1
   */
  public String getIdmac1()
  {
    return (String)getAttributeInternal(IDMAC1);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDMAC using the alias name Idmac1
   */
  public void setIdmac1(String value)
  {
    setAttributeInternal(IDMAC1, value);
  }

  /**
   * 
   *  Gets the attribute value for TARA using the alias name TaraTeoric
   */
  public Number getTaraTeoric()
  {
    return (Number)getAttributeInternal(TARATEORIC);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for TARA using the alias name TaraTeoric
   */
  public void setTaraTeoric(Number value)
  {
    setAttributeInternal(TARATEORIC, value);
  }

  /**
   * 
   *  Gets the attribute value for TARA using the alias name TaraReal
   */
  public Number getTaraReal()
  {
    return (Number)getAttributeInternal(TARAREAL);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for TARA using the alias name TaraReal
   */
  public void setTaraReal(Number value)
  {
    setAttributeInternal(TARAREAL, value);
  }

  /**
   * 
   *  Gets the attribute value for DESCRIP using the alias name Descrip1
   */
  public String getDescrip1()
  {
    return (String)getAttributeInternal(DESCRIP1);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for DESCRIP using the alias name Descrip1
   */
  public void setDescrip1(String value)
  {
    setAttributeInternal(DESCRIP1, value);
  }

  /**
   * 
   *  Gets the attribute value for IDTIPMAC using the alias name Idtipmac
   */
  public String getIdtipmac()
  {
    return (String)getAttributeInternal(IDTIPMAC);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDTIPMAC using the alias name Idtipmac
   */
  public void setIdtipmac(String value)
  {
    setAttributeInternal(IDTIPMAC, value);
  }

  /**
   * 
   *  Gets the attribute value for IDART using the alias name Idart
   */
  public String getIdart()
  {
    return (String)getAttributeInternal(IDART);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDART using the alias name Idart
   */
  public void setIdart(String value)
  {
    setAttributeInternal(IDART, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute PesActual
   */
  public Number getPesActual()
  {
    return (Number)getAttributeInternal(PESACTUAL);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute PesActual
   */
  public void setPesActual(Number value)
  {
    setAttributeInternal(PESACTUAL, value);
    if (value != null)
    {
      setPesUnitariReal(value);
    }
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute PesUnitariReal
   */
  public Number getPesUnitariReal()
  {
    return (Number)getAttributeInternal(PESUNITARIREAL);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute PesUnitariReal
   */
  public void setPesUnitariReal(Number value)
  {
    try
    {
    Number tara = getTaraReal();
    if (tara == null)
      tara = getTaraTeoric();
    if (tara == null)
    {
      // Si es que no está informado, no continuar
      return;
    }
    
    Number pesUnitari = new Number(Math.floor((((value.doubleValue() * 1000) - (tara.multiply(new Number(1000)).doubleValue())) / getCantot().intValue()) * getUniemb().intValue()));
    setAttributeInternal(PESUNITARIREAL, pesUnitari);
    }
    catch (SQLException e)
    {
      // Nada
    }
  }
  
  public String isOkSetPesUnitari()
  {
    if (getControlpes() != null && getControlpes().equals("N"))
    {
      return "L'article no es controla per pes";
    }
    if (getMultiref() != null && getMultiref().equals("S"))
    {
      return "El contenedor es multireferencia";
    }
    return null;
  }

  /**
   * 
   *  getAttrInvokeAccessor: generated method. Do not modify.
   */
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case IDARTIF:
        return getIdartif();
      case DESCRIP:
        return getDescrip();
      case CONTROLPES:
        return getControlpes();
      case PESUNIT:
        return getPesunit();
      case FECULTMODPES:
        return getFecultmodpes();
      case MODPESBY:
        return getModpesby();
      case CANTOT:
        return getCantot();
      case UNIEMB:
        return getUniemb();
      case IDMAC:
        return getIdmac();
      case IDART1:
        return getIdart1();
      case MULTIREF:
        return getMultiref();
      case IDMAC1:
        return getIdmac1();
      case TARATEORIC:
        return getTaraTeoric();
      case TARAREAL:
        return getTaraReal();
      case DESCRIP1:
        return getDescrip1();
      case IDTIPMAC:
        return getIdtipmac();
      case IDART:
        return getIdart();
      case PESACTUAL:
        return getPesActual();
      case PESUNITARIREAL:
        return getPesUnitariReal();
      default:
        return super.getAttrInvokeAccessor(index, attrDef);
      }
  }

  /**
   * 
   *  setAttrInvokeAccessor: generated method. Do not modify.
   */
  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case IDARTIF:
        setIdartif((String)value);
        return;
      case CONTROLPES:
        setControlpes((String)value);
        return;
      case PESUNIT:
        setPesunit((Number)value);
        return;
      case FECULTMODPES:
        setFecultmodpes((FlexiDate)value);
        return;
      case MODPESBY:
        setModpesby((String)value);
        return;
      case CANTOT:
        setCantot((Number)value);
        return;
      case UNIEMB:
        setUniemb((Number)value);
        return;
      case IDMAC:
        setIdmac((String)value);
        return;
      case IDART1:
        setIdart1((String)value);
        return;
      case MULTIREF:
        setMultiref((String)value);
        return;
      case IDMAC1:
        setIdmac1((String)value);
        return;
      case TARATEORIC:
        setTaraTeoric((Number)value);
        return;
      case TARAREAL:
        setTaraReal((Number)value);
        return;
      case DESCRIP1:
        setDescrip1((String)value);
        return;
      case IDTIPMAC:
        setIdtipmac((String)value);
        return;
      case IDART:
        setIdart((String)value);
        return;
      case PESACTUAL:
        setPesActual((Number)value);
        return;
      case PESUNITARIREAL:
        setPesUnitariReal((Number)value);
        return;
      default:
        super.setAttrInvokeAccessor(index, value, attrDef);
        return;
      }
  }
  
  
}