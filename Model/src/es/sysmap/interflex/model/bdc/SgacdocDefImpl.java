package es.sysmap.interflex.model.bdc;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import oracle.jbo.ApplicationModule;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.client.remote.SequenceImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.domain.Number;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class SgacdocDefImpl extends EntityDefImpl 
{
  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public SgacdocDefImpl()
  {
  }
  
  public SgacdocImpl getCdocTL(DBTransaction txn)
  {
    Row row = cdocTLExist(txn);
    if (row != null)
    {
        Object [] obj = {(Number)row.getAttribute("Iddoc")};
        Key key = new Key(obj); 
        SgacdocImpl cdoc = (SgacdocImpl)findByPrimaryKey(txn, key);
        return cdoc;
      
    }
    else 
    {
        SgacdocImpl cdoc = (SgacdocImpl)super.createInstance(txn, null);
        cdoc.insertarTL();
        return cdoc;
    }
    
  }

  public SgacdocImpl insertarCabecera(DBTransaction txn, 
                                   ResultSet cabecera) 
  {
    try
    {
      String cabstr = cabecera.getString("cab_tid").trim();
      Number cabnum = new Number(cabecera.getBigDecimal("cab_id"));
      Row row = cdocExist(txn, cabstr, cabnum);
      if (row != null)
      {
        Object [] obj = {(Number)row.getAttribute("Iddoc")};
        Key key = new Key(obj); 
        SgacdocImpl cdoc = (SgacdocImpl)findByPrimaryKey(txn, key);
        return cdoc;
      }
      else
      {  
        SgacdocImpl cdoc = (SgacdocImpl)super.createInstance(txn, null);
        if (cdoc.insertarCabecera(cabecera))
          return cdoc;
        else
          return null;
      }
    }
    catch(Exception ex)
    {
      // Michael 14.03.2006 TODO - enseñar al usuario el motivo del problema
      ex.printStackTrace();
      return null;
    }
  } 
  
  private Row cdocTLExist (DBTransaction txn)
  {
    Row row = null;
    ViewObject vo = getcdocTLExistView(txn);
    if (vo != null)
    {
      vo.setForwardOnly(true);
      vo.executeQuery();
      row = vo.first();
    }
    return row;
 
  }
  
  private Row cdocExist(DBTransaction txn, String cabstr, Number cabnum)
  {
    Row row = null;
    ViewObject vo = getcdocExistView(txn);
    if (vo != null)
    {
      vo.setWhereClauseParam(0, cabstr);
      vo.setWhereClauseParam(1, cabnum);
      vo.setForwardOnly(true);
      vo.executeQuery();
      row = vo.first();
    }
    return row;
  }


  private ViewObject getcdocExistView(DBTransaction txn)
  {
    ApplicationModule root = txn.getRootApplicationModule();
    return(root.findViewObject("SgacdocExistView1"));
  }
  
    private ViewObject getcdocTLExistView(DBTransaction txn)
  {
    ApplicationModule root = txn.getRootApplicationModule();
    return(root.findViewObject("SgacdocTLExistView1"));
  }
  
}