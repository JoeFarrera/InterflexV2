package es.sysmap.interflex.model.dmc;
import es.sysmap.interflex.model.bdc.InterflexMessageBundle;
import es.sysmap.interflex.model.bdc.Sgamovexist;
import es.sysmap.interflex.model.dmc.AppModuleImpl;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.domain.Number;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class SgaresmatOpManViewRowImpl extends ViewRowImpl implements es.sysmap.interflex.model.dmc.common.SgaresmatOpManViewRow 
{


  public static final int IDDOC = 0;
  public static final int IDLIN = 1;
  public static final int IDMAC = 2;
  public static final int CANRES = 3;
  public static final int IDBULTO = 4;
  public static final int IDART = 5;
  public static final int IDCABSTR = 6;
  public static final int IDCABNUM = 7;
  public static final int IDTIPDOC = 8;
  public static final int CANTOTBULTO = 9;
  public static final int CANPENBULTO = 10;
  public static final int CANTOTLDOC = 11;
  public static final int CANPENLDOC = 12;
  public static final int IDARTIF = 13;
  public static final int DESCART = 14;
  public static final int CODEAN = 15;
  public static final int DESCRIP = 16;
  public static final int CANTOT = 17;
  public static final int TIPMOV = 18;
  public static final int IDBULTOPK = 19;
  public static final int BULTOSLO = 20;
  public static final int BULTOMLD = 21;
  public static final int INTEGRA = 22;
  public static final int UNIEMB = 23;
  public static final int MULTIREF = 24;
  public static final int MOTIVO = 25;
  public static final int TALBARAN = 26;
  public static final int NALBARAN = 27;
  public static final int BASCULAMLD = 28;
  public static final int BASCULASLO = 29;
  public static final int CANCON = 30;
  public static final int PESINI = 31;
  public static final int PESFIN = 32;
  public static final int CANFIN = 33;
  public static final int DIFPES = 34;
  public static final int OBSERV = 35;
  public static final int SGAVLDOCVIEW = 36;
  public static final int SGABULTOVIEW = 37;
  public static final int SGAVBULTODISPSORTIDAVIEW = 38;
  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public SgaresmatOpManViewRowImpl()
  {
  }

  /**
   * 
   *  Gets Sgaresmat entity object.
   */
  public es.sysmap.interflex.model.bdc.SgaresmatImpl getSgaresmat()
  {
    return (es.sysmap.interflex.model.bdc.SgaresmatImpl)getEntity(0);
  }

  /**
   * 
   *  Gets the attribute value for IDDOC using the alias name Iddoc
   */
  public Number getIddoc()
  {
    return (Number)getAttributeInternal(IDDOC);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDDOC using the alias name Iddoc
   */
  public void setIddoc(Number value)
  {
    setAttributeInternal(IDDOC, value);
  }

  /**
   * 
   *  Gets the attribute value for IDLIN using the alias name Idlin
   */
  public Number getIdlin()
  {
    return (Number)getAttributeInternal(IDLIN);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDLIN using the alias name Idlin
   */
  public void setIdlin(Number value)
  {
    setAttributeInternal(IDLIN, value);
  }

  /**
   * 
   *  Gets the attribute value for IDMAC using the alias name Idmac
   */
  public String getIdmac()
  {
    return (String)getAttributeInternal(IDMAC);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDMAC using the alias name Idmac
   */
  public void setIdmac(String value)
  {
    setAttributeInternal(IDMAC, value);
  }

  /**
   * 
   *  Gets the attribute value for CANRES using the alias name Canres
   */
  public Number getCanres()
  {
    return (Number)getAttributeInternal(CANRES);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for CANRES using the alias name Canres
   */
  public void setCanres(Number value)
  {
    setAttributeInternal(CANRES, value);
  }

  /**
   * 
   *  Gets the attribute value for IDBULTO using the alias name Idbulto
   */
  public Number getIdbulto()
  {
    return (Number)getAttributeInternal(IDBULTO);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDBULTO using the alias name Idbulto
   */
  public void setIdbulto(Number value)
  {
    setAttributeInternal(IDBULTO, value);
  }

  /**
   * 
   *  Gets the attribute value for IDART using the alias name Idart
   */
  public String getIdart()
  {
    return (String)getAttributeInternal(IDART);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDART using the alias name Idart
   */
  public void setIdart(String value)
  {
    setAttributeInternal(IDART, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Idcabstr
   */
  public String getIdcabstr()
  {
    return (String)getAttributeInternal(IDCABSTR);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Idcabstr
   */
  public void setIdcabstr(String value)
  {
    setAttributeInternal(IDCABSTR, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Idcabnum
   */
  public String getIdcabnum()
  {
    return (String)getAttributeInternal(IDCABNUM);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Idcabnum
   */
  public void setIdcabnum(String value)
  {
    setAttributeInternal(IDCABNUM, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Idtipdoc
   */
  public String getIdtipdoc()
  {
    return (String)getAttributeInternal(IDTIPDOC);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Idtipdoc
   */
  public void setIdtipdoc(String value)
  {
    setAttributeInternal(IDTIPDOC, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Cantotbulto
   */
  public Number getCantotbulto()
  {
    return (Number)getAttributeInternal(CANTOTBULTO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Cantotbulto
   */
  public void setCantotbulto(Number value)
  {
    setAttributeInternal(CANTOTBULTO, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Canpenbulto
   */
  public Number getCanpenbulto()
  {
    return (Number)getAttributeInternal(CANPENBULTO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Canpenbulto
   */
  public void setCanpenbulto(Number value)
  {
    setAttributeInternal(CANPENBULTO, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Cantotldoc
   */
  public Number getCantotldoc()
  {
    return (Number)getAttributeInternal(CANTOTLDOC);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Cantotldoc
   */
  public void setCantotldoc(Number value)
  {
    setAttributeInternal(CANTOTLDOC, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Canpenldoc
   */
  public Number getCanpenldoc()
  {
    return (Number)getAttributeInternal(CANPENLDOC);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Canpenldoc
   */
  public void setCanpenldoc(Number value)
  {
    setAttributeInternal(CANPENLDOC, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Idartif
   */
  public String getIdartif()
  {
    return (String)getAttributeInternal(IDARTIF);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Idartif
   */
  public void setIdartif(String value)
  {
    setAttributeInternal(IDARTIF, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Descart
   */
  public String getDescart()
  {
    return (String)getAttributeInternal(DESCART);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Descart
   */
  public void setDescart(String value)
  {
    setAttributeInternal(DESCART, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Codean
   */
  public String getCodean()
  {
    return (String)getAttributeInternal(CODEAN);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Codean
   */
  public void setCodean(String value)
  {
    setAttributeInternal(CODEAN, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Descrip
   */
  public String getDescrip()
  {
    return (String)getAttributeInternal(DESCRIP);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Descrip
   */
  public void setDescrip(String value)
  {
    setAttributeInternal(DESCRIP, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Cantot
   */
  public Number getCantot()
  {
    return (Number)getAttributeInternal(CANTOT);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Cantot
   */
  public void setCantot(Number value)
  {
    setAttributeInternal(CANTOT, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Tipmov
   */
  public String getTipmov()
  {
    return (String)getAttributeInternal(TIPMOV);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Tipmov
   */
  public void setTipmov(String value)
  {
    setAttributeInternal(TIPMOV, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Cancon
   */
  public Number getCancon()
  {
    // Fem que per defecte torni la quantitat reservada
    Number cancon = (Number)getAttributeInternal(CANCON);
    // Xavi, 02/05/05: Comentat per error al fer entrades amb quantitat 0
    //if (cancon == null || cancon.equals(new Number(0)))
    if (cancon == null)
      return getCanres();
    else
      return cancon;
    //return (Number)getAttributeInternal(CANCON);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Cancon
   */
  public void setCancon(Number value)
  {
    //No deixem que la quantitat confirmada sigui negativa
    if (value != null && value.compareTo(new Number(0)) >= 0 )
    {
      // No deixem fer sortides superiors a la quantitat total
      if (value.compareTo(getCantot()) <= 0 || getTipmov().equals("E"))
      //if (value.compareTo(getCantot()) <= 0)
      {
        // Xavi, 17/04/05: Segons manolo, les sortides tambe s'han de poder fer per una quantitat superior
        setAttributeInternal(CANCON, value);
        if (getTipmov().equals("E"))  
          setCanfin((Number)getCantot().add(getCancon()));
        else
          setCanfin((Number)getCantot().subtract(getCancon()));
      }
      else
        throw new JboException(InterflexMessageBundle.class,
                               InterflexMessageBundle.QUANTITAT_SORTIDA_INCORRECTA,
                               new Object[] {value, getCantot()});

/*      // Si es tracta d'una entrada, deixem posar una quantitat inferior, igual
      // o superior
      if (getTipmov().equals("E"))  
      {
        setAttributeInternal(CANCON, value);
        setCanfin((Number)getCantot().add(getCancon()));
      }
      else
      {
        // Si es tracta d'una sortida, deixem posar una quantitat inferior o igual,
        // per� mai superior
        if (value != null && value.compareTo(getCantot()) <= 0)
        {
          setAttributeInternal(CANCON, value);
          setCanfin((Number)getCantot().subtract(getCancon()));
        }
        else
          throw new JboException(InterflexMessageBundle.class,
                                 InterflexMessageBundle.QUANTITAT_SORTIDA_INCORRECTA,
                                 new Object[] {value, getCantot()});
      }
*/                                 

    }
    else
      throw new JboException(InterflexMessageBundle.class,
                             InterflexMessageBundle.QUANTITAT_NEGATIVA,
                             null);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Pesini
   */
  public Number getPesini()
  {
    return (Number)getAttributeInternal(PESINI);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Pesini
   */
  public void setPesini(Number value)
  {
    setAttributeInternal(PESINI, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Pesfin
   */
  public Number getPesfin()
  {
    return (Number)getAttributeInternal(PESFIN);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Pesfin
   */
  public void setPesfin(Number value)
  {
    setAttributeInternal(PESFIN, value);
    // Si l'article va per pes, intentem calcular les unitats
    quizasCalcularDifpes();
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Canfin
   */
  public Number getCanfin()
  {
    // Fem que per defecte torni la quantitat reservada
    Number canfin = (Number)getAttributeInternal(CANFIN);
    if (canfin == null || canfin.equals(new Number(0)))
    {
      if (getCantot() != null && getCancon() != null)
      {
        if (getTipmov().equals("E"))
          return (Number)getCantot().add(getCancon());
        else
          return (Number)getCantot().subtract(getCancon());
      }
      else
        return new Number(0);
    }
    else
      return canfin;
  
    //return (Number)getAttributeInternal(CANFIN);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Canfin
   */
  public void setCanfin(Number value)
  {
    setAttributeInternal(CANFIN, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Difpes
   *  Fem que retorni la diferencia entre el pes inicial i el pes final
   */
  public Number getDifpes()
  {
    return (Number)getAttributeInternal(DIFPES);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Difpes
   */
  public void setDifpes(Number value)
  {
    setAttributeInternal(DIFPES, value);
  }

  /**
   * 
   *  getAttrInvokeAccessor: generated method. Do not modify.
   */
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case IDDOC:
        return getIddoc();
      case IDLIN:
        return getIdlin();
      case IDMAC:
        return getIdmac();
      case CANRES:
        return getCanres();
      case IDBULTO:
        return getIdbulto();
      case IDART:
        return getIdart();
      case IDCABSTR:
        return getIdcabstr();
      case IDCABNUM:
        return getIdcabnum();
      case IDTIPDOC:
        return getIdtipdoc();
      case CANTOTBULTO:
        return getCantotbulto();
      case CANPENBULTO:
        return getCanpenbulto();
      case CANTOTLDOC:
        return getCantotldoc();
      case CANPENLDOC:
        return getCanpenldoc();
      case IDARTIF:
        return getIdartif();
      case DESCART:
        return getDescart();
      case CODEAN:
        return getCodean();
      case DESCRIP:
        return getDescrip();
      case CANTOT:
        return getCantot();
      case TIPMOV:
        return getTipmov();
      case IDBULTOPK:
        return getIdbultopk();
      case BULTOSLO:
        return getBultoslo();
      case BULTOMLD:
        return getBultomld();
      case INTEGRA:
        return getIntegra();
      case UNIEMB:
        return getUniemb();
      case MULTIREF:
        return getMultiref();
      case MOTIVO:
        return getMotivo();
      case TALBARAN:
        return getTalbaran();
      case NALBARAN:
        return getNalbaran();
      case BASCULAMLD:
        return getBasculamld();
      case BASCULASLO:
        return getBasculaslo();
      case CANCON:
        return getCancon();
      case PESINI:
        return getPesini();
      case PESFIN:
        return getPesfin();
      case CANFIN:
        return getCanfin();
      case DIFPES:
        return getDifpes();
      case OBSERV:
        return getObserv();
      case SGAVLDOCVIEW:
        return getSgavldocView();
      case SGABULTOVIEW:
        return getSgabultoView();
      case SGAVBULTODISPSORTIDAVIEW:
        return getSgavbultoDispSortidaView();
      default:
        return super.getAttrInvokeAccessor(index, attrDef);
      }
  }

  /**
   * 
   *  setAttrInvokeAccessor: generated method. Do not modify.
   */
  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case IDDOC:
        setIddoc((Number)value);
        return;
      case IDLIN:
        setIdlin((Number)value);
        return;
      case IDMAC:
        setIdmac((String)value);
        return;
      case CANRES:
        setCanres((Number)value);
        return;
      case IDBULTO:
        setIdbulto((Number)value);
        return;
      case IDART:
        setIdart((String)value);
        return;
      case IDCABSTR:
        setIdcabstr((String)value);
        return;
      case IDCABNUM:
        setIdcabnum((String)value);
        return;
      case IDTIPDOC:
        setIdtipdoc((String)value);
        return;
      case CANTOTBULTO:
        setCantotbulto((Number)value);
        return;
      case CANPENBULTO:
        setCanpenbulto((Number)value);
        return;
      case CANTOTLDOC:
        setCantotldoc((Number)value);
        return;
      case CANPENLDOC:
        setCanpenldoc((Number)value);
        return;
      case IDARTIF:
        setIdartif((String)value);
        return;
      case DESCART:
        setDescart((String)value);
        return;
      case CODEAN:
        setCodean((String)value);
        return;
      case DESCRIP:
        setDescrip((String)value);
        return;
      case CANTOT:
        setCantot((Number)value);
        return;
      case TIPMOV:
        setTipmov((String)value);
        return;
      case IDBULTOPK:
        setIdbultopk((Number)value);
        return;
      case BULTOSLO:
        setBultoslo((Number)value);
        return;
      case BULTOMLD:
        setBultomld((Number)value);
        return;
      case INTEGRA:
        setIntegra((String)value);
        return;
      case UNIEMB:
        setUniemb((Number)value);
        return;
      case MULTIREF:
        setMultiref((String)value);
        return;
      case MOTIVO:
        setMotivo((String)value);
        return;
      case TALBARAN:
        setTalbaran((String)value);
        return;
      case NALBARAN:
        setNalbaran((String)value);
        return;
      case BASCULAMLD:
        setBasculamld((String)value);
        return;
      case BASCULASLO:
        setBasculaslo((String)value);
        return;
      case CANCON:
        setCancon((Number)value);
        return;
      case PESINI:
        setPesini((Number)value);
        return;
      case PESFIN:
        setPesfin((Number)value);
        return;
      case CANFIN:
        setCanfin((Number)value);
        return;
      case DIFPES:
        setDifpes((Number)value);
        return;
      case OBSERV:
        setObserv((String)value);
        return;
      default:
        super.setAttrInvokeAccessor(index, value, attrDef);
        return;
      }
  }
  

  /**
   * Confirma el moviment corresponent a la reserva
   */

  public void confirmarReserva()
  {
    // Posem tota la informaci� a l'estructura que necessitem per crear l'hist�ric
    Sgamovexist movexist = new Sgamovexist();
    movexist.setCancon(getCancon());
    movexist.setCanres(getCanres());
    movexist.setIdart(getIdart());
    movexist.setIdbulto(getIdbulto());
    movexist.setIdcabnum(getIdcabnum());
    movexist.setIdcabstr(getIdcabstr());
    movexist.setIddoc(getIddoc());
    movexist.setIdlin(getIdlin());
    movexist.setIdmac(getIdmac());
    movexist.setIdtipdoc(getIdtipdoc());
    movexist.setObserv(getObserv());
    movexist.setPesfin(getPesfin());
    movexist.setPesini(getPesini());
    movexist.setUbipos(getSgaresmat().getSgamac().getUbipos());
    movexist.setIntegra(getIntegra());
    movexist.setTalbaran(getTalbaran());
    movexist.setNalbaran(getNalbaran());
    
    getSgaresmat().confirmarReserva(movexist);
  }

  
  public void anularReserva(boolean bAnularPendent)
  {
    getSgaresmat().anularReserva(bAnularPendent);
  }
  
  
  /**
   * Retorna cert si es tracta d'una entrada. En cas contrari, sera una sortida
   * @return 
   */
  public boolean isEntrada()
  {
    return (getTipmov().equals("E"));
  }

  /**
   * 
   *  Gets the associated <code>RowIterator</code> using master-detail link SgavldocView
   */
  public oracle.jbo.RowIterator getSgavldocView()
  {
    return (oracle.jbo.RowIterator)getAttributeInternal(SGAVLDOCVIEW);
  }

  /**
   * 
   *  Gets the attribute value for IDBULTOPK using the alias name Idbultopk
   */
  public Number getIdbultopk()
  {
    return (Number)getAttributeInternal(IDBULTOPK);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDBULTOPK using the alias name Idbultopk
   */
  public void setIdbultopk(Number value)
  {
    setAttributeInternal(IDBULTOPK, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Observ
   */
  public String getObserv()
  {
    return (String)getAttributeInternal(OBSERV);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Observ
   */
  public void setObserv(String value)
  {
    setAttributeInternal(OBSERV, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Bultoslo
   */
  public Number getBultoslo()
  {
    return (Number)getAttributeInternal(BULTOSLO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Bultoslo
   */
  public void setBultoslo(Number value)
  {
    setAttributeInternal(BULTOSLO, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Bultomld
   */
  public Number getBultomld()
  {
    return (Number)getAttributeInternal(BULTOMLD);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Bultomld
   */
  public void setBultomld(Number value)
  {
    setAttributeInternal(BULTOMLD, value);
  }

  /**
   * 
   *  Gets the associated <code>RowIterator</code> using master-detail link SgabultoView
   */
  public oracle.jbo.RowIterator getSgabultoView()
  {
    return (oracle.jbo.RowIterator)getAttributeInternal(SGABULTOVIEW);
  }

  /**
   * Crea un bulto nou per una reserva de sortida
   * @return 
   */
  public Number nouBulto(String tipoCarga)
  {
    
    // Creem un bulto pel document
    SgabultoViewRowImpl bulto = (SgabultoViewRowImpl)getSgabultoView().createRow();
    getSgabultoView().insertRow(bulto);
    
    // Actualitzem el numero de bulto al document de sortida
    getSgaresmat().setBultoSalida(tipoCarga, bulto.getIdbulto());
    getApplicationModule().getTransaction().postChanges();
    ViewObject vo = getApplicationModule().findViewObject("SgavbultoDispSortidaView1");
    vo.clearCache();
    vo.executeQuery();
    //Number cancon = getCancon();
    getViewObject().executeQuery();
    //setCancon(cancon);
    //this.populateAttributeAsChanged(CANCON, cancon);
    return bulto.getIdbulto();
  }

  /**
   * Tanca el bulto actual assignat a la sortida
   * @return 
   */
  public void tancarBulto(String tipoCarga)
  {
    // Actualitzem el numero de bulto al document de sortida
    getSgaresmat().setBultoSalida(tipoCarga, null);
    getApplicationModule().getTransaction().postChanges();
    //Number cancon = getCancon();
    getViewObject().executeQuery();
  }
  
  
  
//Michael 24.11.2005 TODO: Es obsoleto esto ???
///**
//   * 
//   * @param canbulto Quantitat m�xima per bulto
//   * @param idBulto Null si encara no ha estat creat
//   * @param tipoCarga SLO/MLD
//   */
//  public void crearBultos(String tipoCarga, Number canbulto, boolean tancarBulto)
//  {
//    Number idbulto = null;
//    Number pes = null;
//    if (getPesini() != null && getPesfin() != null)
//      pes = (Number)getPesfin().subtract(getPesini()).abs();
//    else
//      pes = new Number(0);
//    if (tipoCarga.equals("SLO"))
//      idbulto = this.getBultoslo();
//    else
//      idbulto = this.getBultomld();
//    // Si la quantitat per bulto es 0, vol dir que tot va a parar al mateix bulto  
//    if (canbulto.equals(new Number(0)))
//      canbulto = getCancon();
//      
//    Number cantot = getCancon();
//    while (cantot.compareTo(0) > 0)
//    {
//      // Si cal crear el bulto, el creem
//      if (idbulto == null)
//        idbulto = nouBulto(tipoCarga);
//      // Creem la linia de bulto pel bulto
//      boolean trobat = false;
//      RowIterator bultos = getSgabultoView();
//      while (bultos.hasNext() && !trobat)
//      {
//        SgabultoViewRowImpl bulto = (SgabultoViewRowImpl)bultos.next();
//        Number test = bulto.getIdbulto();
//        if (bulto.getIdbulto().equals(idbulto))
//        {
//          Number afegir = null;
//          if (cantot.compareTo(canbulto) >= 0)
//            afegir = canbulto;
//          else
//            afegir = cantot;
//          // Pes proporcional segons la quantitat  
//          Number pesAfegir = (Number)pes.multiply(afegir).divide(getCancon()).round(2);
//          
//          bulto.afegirABultoSortida(getIdlin(), getIdart(), afegir, pesAfegir);
//          cantot = cantot.subtract(afegir);
//          // Resetejem idbulto
//          idbulto = null;    
//          trobat = true;
//        }
//        // Si s'ha de tancar el bulto, el tanquem
//        if (tancarBulto)
//          tancarBulto(tipoCarga);
//      }
//    }
//  }


  /**
   * Ver si la b�scula est� marcado para funcionar o no
   * @return true si est� especificado como en funcionamiento.
   * Si el campo es null, tambi�n devuelve true
   * @param tipoCarga distingir entre silo y miniload
   */
  private boolean useBascula(String tipoCarga)
  {
    String funcionamientoBascula;
    if (tipoCarga.equals("SLO"))
      funcionamientoBascula = getBasculaslo();
    else
      funcionamientoBascula = getBasculamld();
      
    if (funcionamientoBascula != null)
      return funcionamientoBascula.equals("S");
    else
      return true;
  }
  /**
   * Si la b�scula funciona, el peso es el la diferencia de la b�scula.
   * Si no, el peso es el peso te�rico seg�n la cantidad a confirmar
   * @return el peso resultante
   * @param tipoCarga
   */
  private Number calcularPes(String tipoCarga)
  {
    Number pes;
    if (useBascula (tipoCarga))
    {
      if (getPesini() != null && getPesfin() != null)
        pes = (Number)getPesfin().subtract(getPesini()).abs();
      else
        pes = new Number(0); 
    }
    else
    {
      pes = getSgaresmat().getPesTeoric(getCancon());
    }
    return pes;
  }

  /**
   * 
   * @param canbulto Quantitat m�xima per bulto
   * @param idBulto Null si encara no ha estat creat
   * @param tipoCarga SLO/MLD
   */
  public void crearBultos_(String tipoCarga, Number canbulto, boolean bFraccionar, boolean tancarBulto)
  {
    Number idbulto = null;
    
    /* Michael 24.11.2005
    if (getPesini() != null && getPesfin() != null)
      pes = (Number)getPesfin().subtract(getPesini()).abs();
    else
      pes = new Number(0);
    */

    Number pes = calcularPes(tipoCarga);
    
    if (tipoCarga.equals("SLO"))
      idbulto = this.getBultoslo();
    else
      idbulto = this.getBultomld();
    // Si la quantitat per bulto es 0, vol dir que tot va a parar al mateix bulto  
    if (canbulto.equals(new Number(0)))
      canbulto = getCancon();
      
    Number cantot = getCancon();
    while (cantot.compareTo(0) > 0)
    {
      // Si cal crear el bulto, el creem
      if (idbulto == null)
        idbulto = nouBulto(tipoCarga);
      // Creem la linia de bulto pel bulto
      boolean trobat = false;
      RowIterator bultos = getSgabultoView();
      while (bultos.hasNext() && !trobat)
      {
        SgabultoViewRowImpl bulto = (SgabultoViewRowImpl)bultos.next();
        Number test = bulto.getIdbulto();
        if (bulto.getIdbulto().equals(idbulto))
        {
          Number afegir = null;
          if (cantot.compareTo(canbulto) >= 0)
            afegir = canbulto;
          else
            afegir = cantot;
          // Pes proporcional segons la quantitat  
          Number pesAfegir = (Number)pes.multiply(afegir).divide(getCancon()).round(2);
          
          bulto.afegirABultoSortida(getIdlin(), getIdart(), afegir, pesAfegir, false);
          cantot = cantot.subtract(afegir);
          if (bFraccionar)
            canbulto = cantot;
          // Resetejem idbulto
          idbulto = null;    
          trobat = true;
        }
        // Michael 9.07.2018: TODO: Cantidad del bulto se esta ficant malament, de tant en tant TODO
        // Si s'ha de tancar el bulto, el tanquem
        if (tancarBulto)
        {
          tancarBulto(tipoCarga);
          tancarBulto = !bFraccionar;
        }
      }
    }
  }


    /**
   * 
   * @param canbulto Quantitat m�xima per bulto
   * @param idBulto Null si encara no ha estat creat
   * @param tipoCarga SLO/MLD
   */
   
  public void crearBultos_(String tipoCarga, Number[] canbulto, boolean bFraccionar, boolean tancarBulto)
  {
    Number idbulto = null;
    
// Michael 24.11.2005
//    Number pes = null;
//    if (getPesini() != null && getPesfin() != null)
//      pes = (Number)getPesfin().subtract(getPesini()).abs();
//    else
//      pes = new Number(0);
    
    Number pes = calcularPes(tipoCarga);
    
    if (tipoCarga.equals("SLO"))
      idbulto = this.getBultoslo();
    else
      idbulto = this.getBultomld();
    // Si la quantitat per bulto es 0, vol dir que tot va a parar al mateix bulto  
    if (canbulto[0].equals(new Number(0)))
      canbulto[0] = getCancon();
      
    Number cantot = getCancon();
    int cont = 0;
    while (cantot.compareTo(0) > 0)
    {
      // Si cal crear el bulto, el creem
      if (idbulto == null)
        idbulto = nouBulto(tipoCarga);
      // Creem la linia de bulto pel bulto
      boolean trobat = false;
      RowIterator bultos = getSgabultoView();
      while (bultos.hasNext() && !trobat)
      {
        SgabultoViewRowImpl bulto = (SgabultoViewRowImpl)bultos.next();
        Number test = bulto.getIdbulto();
        if (bulto.getIdbulto().equals(idbulto))
        {
          Number afegir = null;
          if (cantot.compareTo(canbulto[0]) >= 0)
            afegir = canbulto[0];
          else
            afegir = cantot;
          // Pes proporcional segons la quantitat  
          Number pesAfegir = (Number)pes.multiply(afegir).divide(getCancon()).round(2);
          
          bulto.afegirABultoSortida(getIdlin(), getIdart(), afegir, pesAfegir, false);
          cantot = cantot.subtract(afegir);
          cont++;
          if (bFraccionar)
          {
            if (cont < canbulto.length)            
              canbulto[0] = canbulto[cont];
            else
              canbulto[0] = cantot;
          }
          // Resetejem idbulto
          idbulto = null;    
          trobat = true;
        }
        // Si s'ha de tancar el bulto, el tanquem
        if (tancarBulto)
        {
          tancarBulto(tipoCarga);
          //Xavi, 03/11/05: Si es l'ultim bulto d'una sortida fraccionada, el deixem obert
          if (bFraccionar && cont == canbulto.length)
            tancarBulto = false;
        }
      }
    }
  }

  /**
   * Si l'article es controla per pes, actualitzem difpes
   */
  public void quizasCalcularDifpes()
  {
    try
    {
      setDifpes(getSgaresmat().getSgaexistencia().getSgaarticulo().calcularDifpes(getPesfin().subtract(getPesini())));
    }
    catch(Exception ex)
    {
      System.out.println("Error al calcular difpes");
    }
  }
  

  /**
   * Retorna cert si s'ha de mostrar una advertencia per la diferencia de pes
   * en l'operaci�
   * @return 
   * @param tipoCarga // Michael 24.11.2005 controlar si hay que usar la b�scula o no
   */
  public boolean verificarPes(String tipoCarga)
  {
    boolean verificar = false;
    if (useBascula(tipoCarga))
    {
      // :TODO Tractar el cas que ya no hi es la reserva
      if (getSgaresmat() == null)
        throw new RuntimeException("Ya no existeix la reserva del material");
      
      
      if (getSgaresmat().getSgaexistencia().getSgaarticulo().controlarPes())
      {
        if (getDifpes() != null)
        {
          // TODO: Caldra aplicar un marge de tolerancia...
          if (!(getDifpes().abs().compareTo(getCancon()) == 0))
            verificar = true;
        }
        else
          verificar = true;
      }
    }

    return verificar;
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Integra
   */
  public String getIntegra()
  {
    return (String)getAttributeInternal(INTEGRA);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Integra
   */
  public void setIntegra(String value)
  {
    setAttributeInternal(INTEGRA, value);
  }

  /**
   * 
   *  Gets the associated <code>RowIterator</code> using master-detail link SgavbultoDispSortidaView
   */
  public RowIterator getSgavbultoDispSortidaView()
  {
    return (RowIterator)getAttributeInternal(SGAVBULTODISPSORTIDAVIEW);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Uniemb
   */
  public Number getUniemb()
  {
    return (Number)getAttributeInternal(UNIEMB);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Uniemb
   */
  public void setUniemb(Number value)
  {
    setAttributeInternal(UNIEMB, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Multiref
   */
  public String getMultiref()
  {
    return (String)getAttributeInternal(MULTIREF);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Multiref
   */
  public void setMultiref(String value)
  {
    setAttributeInternal(MULTIREF, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Motivo
   */
  public String getMotivo()
  {
    return (String)getAttributeInternal(MOTIVO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Motivo
   */
  public void setMotivo(String value)
  {
    setAttributeInternal(MOTIVO, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Talbaran
   */
  public String getTalbaran()
  {
    return (String)getAttributeInternal(TALBARAN);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Talbaran
   */
  public void setTalbaran(String value)
  {
    setAttributeInternal(TALBARAN, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Nalbaran
   */
  public String getNalbaran()
  {
    return (String)getAttributeInternal(NALBARAN);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Nalbaran
   */
  public void setNalbaran(String value)
  {
    setAttributeInternal(NALBARAN, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Basculamld
   */
  public String getBasculamld()
  {
    return (String)getAttributeInternal(BASCULAMLD);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Basculamld
   */
  public void setBasculamld(String value)
  {
    setAttributeInternal(BASCULAMLD, value);
  }

  /**
   * 
   *  Gets the attribute value for the calculated attribute Basculaslo
   */
  public String getBasculaslo()
  {
    return (String)getAttributeInternal(BASCULASLO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Basculaslo
   */
  public void setBasculaslo(String value)
  {
    setAttributeInternal(BASCULASLO, value);
  }


}