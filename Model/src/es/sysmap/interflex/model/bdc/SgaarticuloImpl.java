package es.sysmap.interflex.model.bdc;
import java.sql.ResultSet;
import java.sql.SQLException;
import oracle.jbo.JboContext;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Date;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import es.sysmap.interflex.model.bdc.common.FlexiDate;
import oracle.jbo.AttributeList;
import oracle.jbo.server.SequenceImpl;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class SgaarticuloImpl extends EntityImpl 
{
  public static final int IDART = 0;
  public static final int IDARTANT = 1;
  public static final int DESCRIP = 2;
  public static final int PESUNIT = 3;
  public static final int CONTROLPES = 4;
  public static final int FECULTMOV = 5;
  public static final int CODEAN = 6;
  public static final int UNIEMB = 7;
  public static final int IDTIPMAC = 8;
  public static final int UNIMAC = 9;
  public static final int RELLENO = 10;
  public static final int MULTIREF = 11;
  public static final int ROTACION = 12;
  public static final int PICKING1 = 13;
  public static final int IDARTIF = 14;
  public static final int CREATEDBY = 15;
  public static final int MODIFIEDBY = 16;
  public static final int CREATEDON = 17;
  public static final int MODIFIEDON = 18;
  public static final int TOLFIFO = 19;
  public static final int FECULTMODPES = 20;
  public static final int MODPESBY = 21;
  public static final int PESUNIVEN = 22;
  public static final int UNIEMBESP = 23;
  public static final int TIPPREP = 24;
  public static final int SGATIPOMAC = 25;
  public static final int SGAEXISTENCIA = 26;
  public static final int SGALDOC = 27;

























































  private static SgaarticuloDefImpl mDefinitionObject;

  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public SgaarticuloImpl()
  {
  }

  /**
   * 
   *  Retrieves the definition object for this instance class.
   */
  public static synchronized EntityDefImpl getDefinitionObject()
  {
    if (mDefinitionObject == null)
    {
      mDefinitionObject = (SgaarticuloDefImpl)EntityDefImpl.findDefObject("es.sysmap.interflex.model.bdc.Sgaarticulo");
    }
    return mDefinitionObject;
  }


























































  /**
   * 
   *  Gets the attribute value for Idart, using the alias name Idart
   */
  public String getIdart()
  {
    return (String)getAttributeInternal(IDART);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Idart
   */
  public void setIdart(String value)
  {
    setAttributeInternal(IDART, value);
  }

  /**
   * 
   *  Gets the attribute value for Idartant, using the alias name Idartant
   */
  public String getIdartant()
  {
    return (String)getAttributeInternal(IDARTANT);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Idartant
   */
  public void setIdartant(String value)
  {
    setAttributeInternal(IDARTANT, value);
  }

  /**
   * 
   *  Gets the attribute value for Descrip, using the alias name Descrip
   */
  public String getDescrip()
  {
    return (String)getAttributeInternal(DESCRIP);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Descrip
   */
  public void setDescrip(String value)
  {
    setAttributeInternal(DESCRIP, value);
  }

  /**
   * 
   *  Gets the attribute value for Pesunit, using the alias name Pesunit
   */
  public Number getPesunit()
  {
    return (Number)getAttributeInternal(PESUNIT);
  }
  
  /**
   * 
   * @return El usuario según la sesión
   */
  private String getUser()
  {
    return (String)getDBTransaction().getSession().getEnvironment().get(JboContext.SECURITY_PRINCIPAL);
  }
  
  /**
   * 
   *  Sets <code>value</code> as the attribute value for Pesunit
   */
  public void setPesunit(Number value)
  {
    if (value != null)
      if (value.intValue() > 0)
    {
      setAttributeInternal(PESUNIT, value);
      // Michael 23.11.2005 Actualizar mod. pes
      setFecultmodpes(FlexiDate.currentDate());
      setModpesby(getUser());
      // Michael 05.05.2011
      Number uniemb = getUniemb();
      
      if (uniemb != null && uniemb.compareTo(new Number(1)) > 0)
      {
          setPesuniven((Number)value.divide(uniemb).round(0));
      }
      else
          setPesuniven(value);
    
    }
    
  }

  /**
   * 
   *  Gets the attribute value for Controlpes, using the alias name Controlpes
   */
  public String getControlpes()
  {
    return (String)getAttributeInternal(CONTROLPES);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Controlpes
   */
  public void setControlpes(String value)
  {
    setAttributeInternal(CONTROLPES, value);
  }





  /**
   * 
   *  Gets the attribute value for Fecultmov, using the alias name Fecultmov
   */
  public FlexiDate getFecultmov()
  {
    return (FlexiDate)getAttributeInternal(FECULTMOV);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Fecultmov
   */
  public void setFecultmov(FlexiDate value)
  {
    setAttributeInternal(FECULTMOV, value);
  }

  /**
   * 
   *  Gets the attribute value for Codean, using the alias name Codean
   */
  public String getCodean()
  {
    return (String)getAttributeInternal(CODEAN);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Codean
   */
  public void setCodean(String value)
  {
    setAttributeInternal(CODEAN, value);
  }

  /**
   * 
   *  Gets the attribute value for Uniemb, using the alias name Uniemb
   *  If there is a value for UNIEMBESP, returns that instead
   */
  public Number getUniemb()
  {
    if (getUniembesp().isZero())
      return (Number)getAttributeInternal(UNIEMB);
    else
      return getUniembesp();
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Uniemb
   */
  public void setUniemb(Number value)
  {
    setAttributeInternal(UNIEMB, value);
    
    // Michael 05.05.2011 set pesuniven si cal
    if (value != null && value.compareTo(new Number(0)) > 0)
    {
      Number pesunit = getPesunit();
      if (pesunit != null && pesunit.compareTo(new Number(0)) > 0)
      {
        setPesuniven((Number)pesunit.divide(value).round(0));
      }
    }
    
    
  }
  
 

  /**
   * 
   *  Gets the attribute value for Idtipmac, using the alias name Idtipmac
   */
  public String getIdtipmac()
  {
    return (String)getAttributeInternal(IDTIPMAC);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Idtipmac
   */
  public void setIdtipmac(String value)
  {
    setAttributeInternal(IDTIPMAC, value);
  }

  /**
   * 
   *  Gets the attribute value for Unimac, using the alias name Unimac
   */
  public Number getUnimac()
  {
    return (Number)getAttributeInternal(UNIMAC);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Unimac
   */
  public void setUnimac(Number value)
  {
    setAttributeInternal(UNIMAC, value);
  }

  /**
   * 
   *  Gets the attribute value for Relleno, using the alias name Relleno
   */
  public String getRelleno()
  {
    return (String)getAttributeInternal(RELLENO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Relleno
   */
  public void setRelleno(String value)
  {
    setAttributeInternal(RELLENO, value);
  }

  /**
   * 
   *  Gets the attribute value for Multiref, using the alias name Multiref
   */
  public String getMultiref()
  {
    return (String)getAttributeInternal(MULTIREF);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Multiref
   */
  public void setMultiref(String value)
  {
    setAttributeInternal(MULTIREF, value);
  }

  /**
   * 
   *  Gets the attribute value for Rotacion, using the alias name Rotacion
   */
  public String getRotacion()
  {
    return (String)getAttributeInternal(ROTACION);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Rotacion
   */
  public void setRotacion(String value)
  {
    setAttributeInternal(ROTACION, value);
  }

  /**
   * 
   *  Gets the attribute value for Picking1, using the alias name Picking1
   */
  public String getPicking1()
  {
    return (String)getAttributeInternal(PICKING1);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Picking1
   */
  public void setPicking1(String value)
  {
    setAttributeInternal(PICKING1, value);
  }

  /**
   * 
   *  getAttrInvokeAccessor: generated method. Do not modify.
   */
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case IDART:
        return getIdart();
      case IDARTANT:
        return getIdartant();
      case DESCRIP:
        return getDescrip();
      case PESUNIT:
        return getPesunit();
      case CONTROLPES:
        return getControlpes();
      case FECULTMOV:
        return getFecultmov();
      case CODEAN:
        return getCodean();
      case UNIEMB:
        return getUniemb();
      case IDTIPMAC:
        return getIdtipmac();
      case UNIMAC:
        return getUnimac();
      case RELLENO:
        return getRelleno();
      case MULTIREF:
        return getMultiref();
      case ROTACION:
        return getRotacion();
      case PICKING1:
        return getPicking1();
      case IDARTIF:
        return getIdartif();
      case CREATEDBY:
        return getCreatedby();
      case MODIFIEDBY:
        return getModifiedby();
      case CREATEDON:
        return getCreatedon();
      case MODIFIEDON:
        return getModifiedon();
      case TOLFIFO:
        return getTolfifo();
      case FECULTMODPES:
        return getFecultmodpes();
      case MODPESBY:
        return getModpesby();
      case PESUNIVEN:
        return getPesuniven();
      case UNIEMBESP:
        return getUniembesp();
      case TIPPREP:
        return getTipprep();
      case SGAEXISTENCIA:
        return getSgaexistencia();
      case SGALDOC:
        return getSgaldoc();
      case SGATIPOMAC:
        return getSgatipomac();
      default:
        return super.getAttrInvokeAccessor(index, attrDef);
      }
  }

  /**
   * 
   *  setAttrInvokeAccessor: generated method. Do not modify.
   */
  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case IDART:
        setIdart((String)value);
        return;
      case IDARTANT:
        setIdartant((String)value);
        return;
      case DESCRIP:
        setDescrip((String)value);
        return;
      case PESUNIT:
        setPesunit((Number)value);
        return;
      case CONTROLPES:
        setControlpes((String)value);
        return;
      case FECULTMOV:
        setFecultmov((FlexiDate)value);
        return;
      case CODEAN:
        setCodean((String)value);
        return;
      case UNIEMB:
        setUniemb((Number)value);
        return;
      case IDTIPMAC:
        setIdtipmac((String)value);
        return;
      case UNIMAC:
        setUnimac((Number)value);
        return;
      case RELLENO:
        setRelleno((String)value);
        return;
      case MULTIREF:
        setMultiref((String)value);
        return;
      case ROTACION:
        setRotacion((String)value);
        return;
      case PICKING1:
        setPicking1((String)value);
        return;
      case IDARTIF:
        setIdartif((String)value);
        return;
      case TOLFIFO:
        setTolfifo((Number)value);
        return;
      case FECULTMODPES:
        setFecultmodpes((FlexiDate)value);
        return;
      case MODPESBY:
        setModpesby((String)value);
        return;
      case PESUNIVEN:
        setPesuniven((Number)value);
        return;
      case UNIEMBESP:
        setUniembesp((Number)value);
        return;
      case TIPPREP:
        setTipprep((Number)value);
        return;
      default:
        super.setAttrInvokeAccessor(index, value, attrDef);
        return;
      }
  }


  /**
   * 
   *  Gets the associated entity oracle.jbo.RowIterator
   */
  public RowIterator getSgaexistencia()
  {
    return (RowIterator)getAttributeInternal(SGAEXISTENCIA);
  }


  /**
   * 
   *  Gets the associated entity oracle.jbo.RowIterator
   */
  public RowIterator getSgaldoc()
  {
    return (RowIterator)getAttributeInternal(SGALDOC);
  }


  /**
   * 
   *  Gets the associated entity SgatipomacImpl
   */
  public SgatipomacImpl getSgatipomac()
  {
    return (SgatipomacImpl)getAttributeInternal(SGATIPOMAC);
  }

  /**
   * 
   *  Sets <code>value</code> as the associated entity SgatipomacImpl
   */
  public void setSgatipomac(SgatipomacImpl value)
  {
    setAttributeInternal(SGATIPOMAC, value);
  }


  /**
   * 
   *  Gets the attribute value for Idartif, using the alias name Idartif
   */
  public String getIdartif()
  {
    return (String)getAttributeInternal(IDARTIF);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Idartif
   */
  public void setIdartif(String value)
  {
    setAttributeInternal(IDARTIF, value);
  }


  /**
   * 
   *  Gets the attribute value for Createdby, using the alias name Createdby
   */
  public String getCreatedby()
  {
    return (String)getAttributeInternal(CREATEDBY);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Createdby
   */
  public void setCreatedby(String value)
  {
    setAttributeInternal(CREATEDBY, value);
  }

  /**
   * 
   *  Gets the attribute value for Modifiedby, using the alias name Modifiedby
   */
  public String getModifiedby()
  {
    return (String)getAttributeInternal(MODIFIEDBY);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Modifiedby
   */
  public void setModifiedby(String value)
  {
    setAttributeInternal(MODIFIEDBY, value);
  }

  /**
   * 
   *  Gets the attribute value for Createdon, using the alias name Createdon
   */
  public FlexiDate getCreatedon()
  {
    return (FlexiDate)getAttributeInternal(CREATEDON);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Createdon
   */
  public void setCreatedon(FlexiDate value)
  {
    setAttributeInternal(CREATEDON, value);
  }

  /**
   * 
   *  Gets the attribute value for Modifiedon, using the alias name Modifiedon
   */
  public FlexiDate getModifiedon()
  {
    return (FlexiDate)getAttributeInternal(MODIFIEDON);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Modifiedon
   */
  public void setModifiedon(FlexiDate value)
  {
    setAttributeInternal(MODIFIEDON, value);
  }


  /**
   * 
   *  Gets the attribute value for Tolfifo, using the alias name Tolfifo
   */
  public Number getTolfifo()
  {
    return (Number)getAttributeInternal(TOLFIFO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Tolfifo
   */
  public void setTolfifo(Number value)
  {
    setAttributeInternal(TOLFIFO, value);
  }


  public Number getCantitatSegonsPes(Number pes)
  {
    Number unitats = null;
    Number pesuniven = null;
    Number uniemb = null;
    Number pesunit = null;
    
    if(getControlpes() != null && getControlpes().equals("U"))
    {
      // Gestió de pes per unitat
      pesuniven = getPesuniven();
      
      if ((pesuniven != null && pesuniven.compareTo(new Number(0)) > 0)) {
        // va por unidad de venta segons Quim 03.05.2011
        unitats = (Number)(pes.divide(pesuniven).multiply(1000)).abs();
      }
    }
    else if (getControlpes() != null && getControlpes().equals("S"))
    {
      // Gestió per embalatges
      if(getPesunit() != null && getPesunit().compareTo(new Number(0)) > 0)
      {
        uniemb = getUniemb();
        if (!(uniemb != null && uniemb.compareTo(new Number(0)) > 0))
          uniemb = new Number(1);
        unitats = (Number)(pes.divide(getPesunit()).multiply(uniemb).multiply(1000)).abs();
        System.out.println("unitats = " + unitats.toString());
        // Quitar fracciones de embalajes
        Number suelto = unitats.mod(uniemb);
        unitats = unitats.subtract(suelto);
        if (suelto.compareTo(uniemb.divide(2)) > 0)
          unitats = unitats.add(uniemb);
      }
    }   
    if (unitats == null)
      unitats = new Number(0);
      
    return (Number)unitats.round(0);
    
  }

  /**
   * Si l'article es controla per pes, 
   * calcula el nombre d'unitats corresponents a un pes.
   * En cas contrari retorna zero
   * @return 
   */
  public Number calcularDifpes(Number pes)
  {
    Number unitats = new Number(0);
   
   
    try
    {
        unitats = getCantitatSegonsPes(pes);
    }
    catch(Exception ex)
      {
        unitats = new Number(-1);//...? 
        
      } 
    return (Number)unitats.round(0);
  }
  
  /**
   * Retorna cert si s'ha de controlar el pes en les operacions que es facin amb
   * aquest article
   * @return 
   */
  public boolean controlarPes()
  {
    return (getControlpes() != null && getControlpes().equals("S"));
  }




  /**
   * Retorna cert si s'ha insertat la referencia, fals en cas contrari
   * @return 
   * @param referencia
   */
  public String insertarReferencia(ResultSet referencia) 
  {
    String motivo = null;
    try 
    {
      setIdartif(referencia.getString("ref_id_anterior").trim());
      setDescrip(referencia.getString("ref_desc_ref"));
      setPesunit(new Number(referencia.getBigDecimal("ref_peso_unitario")));
      Number controlPes = new Number(referencia.getBigDecimal("ref_control_peso"));
      if (controlPes != null)
        setControlpes(controlPes.equals(new Number(0)) ? "N" : "S");
      else
        setControlpes("N");
      Number codean = new Number(referencia.getBigDecimal("ref_c_barra"));
      setCodean(codean != null ? codean.toString() :"");
      setUniemb(new Number(referencia.getBigDecimal("ref_u_emb")));
    }
    catch(SQLException ex)
    {
      System.out.println("REFERENCIAS Error inesperat: " + ex);
      motivo = ex.getMessage();
    }
    return motivo;
  }


  /**
   * Retorna cert si s'ha actualitzat la referencia, fals en cas contrari
   * @return 
   * @param referencia
   */
  public String actualitzarReferencia(ResultSet referencia) 
  {
    String motivo = null;
    try 
    {
      Number accion = new Number(referencia.getBigDecimal("ref_accion"));
      if (accion.equals(new Number(40)))
      {
        setIdartif(referencia.getString("ref_id").trim());
        setIdartant(referencia.getString("ref_id_anterior").trim());
      }
      
      setDescrip(referencia.getString("ref_desc_ref"));
      // Michael 20.12.2005 No actualizar el peso desde el host, ya que se hace desde el almacén
//      setPesunit(new Number(referencia.getBigDecimal("ref_peso_unitario")));
//      Number controlPes = new Number(referencia.getBigDecimal("ref_control_peso"));
//      if (controlPes != null)
//        setControlpes(controlPes.equals(new Number(0)) ? "N" : "S");
//      else
//        setControlpes("N");
      // Michael 20.12.2005 fin
      Number codean = new Number(referencia.getBigDecimal("ref_c_barra"));
      setCodean(codean != null ? codean.toString() :"");
      setUniemb(new Number(referencia.getBigDecimal("ref_u_emb")));
      
            
      // Actualització
      SgastockDefImpl stock = (SgastockDefImpl)SgastockImpl.getDefinitionObject();
      if (accion.equals(new Number(40)))
        stock.actualitzarStock(getDBTransaction(), getIdart(), "A");
      else
        stock.actualitzarStock(getDBTransaction(), getIdart(), "H");
      
    }
    catch(SQLException ex)
    {
      System.out.println("REFERENCIAS Error inesperat: " + ex);
      motivo = ex.getMessage();
    }
    return motivo;
  }

  /**
   * 
   *  Add attribute defaulting logic in this method.
   */
  protected void create(AttributeList attributeList)
  {
    super.create(attributeList);

    // Xavi - Afegim la clau provinent de la sequencia seq_idart
    SequenceImpl idartSeq = new SequenceImpl("SEQ_IDART", getDBTransaction());
    setIdart(idartSeq.getSequenceNumber().toString());
    
    
    // Afegim un registre a la taula sgastock corresponent al nou article creat
    SgastockDefImpl stock = (SgastockDefImpl)SgastockImpl.getDefinitionObject();
    stock.crearStockInicial(getDBTransaction(), getIdart());
  }


  /**
   * 
   *  Gets the attribute value for Fecultmodpes, using the alias name Fecultmodpes
   */
  public FlexiDate getFecultmodpes()
  {
    return (FlexiDate)getAttributeInternal(FECULTMODPES);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Fecultmodpes
   */
  public void setFecultmodpes(FlexiDate value)
  {
    setAttributeInternal(FECULTMODPES, value);
  }

  /**
   * 
   *  Gets the attribute value for Modpesby, using the alias name Modpesby
   */
  public String getModpesby()
  {
    return (String)getAttributeInternal(MODPESBY);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Modpesby
   */
  public void setModpesby(String value)
  {
    setAttributeInternal(MODPESBY, value);
  }


  /**
   * 
   *  Gets the attribute value for Pesuniven, using the alias name Pesuniven
   */
  public Number getPesuniven()
  {
    return (Number)getAttributeInternal(PESUNIVEN);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Pesuniven
   */
  public void setPesuniven(Number value)
  {
    setAttributeInternal(PESUNIVEN, value);
  }


  /**
   * 
   *  Gets the attribute value for Uniembesp, using the alias name Uniembesp
   */
  public Number getUniembesp()
  {
    return (Number)getAttributeInternal(UNIEMBESP);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Uniembesp
   */
  public void setUniembesp(Number value)
  {
    setAttributeInternal(UNIEMBESP, value);
  }


  /**
   * 
   *  Gets the attribute value for Tipprep, using the alias name Tipprep
   */
  public Number getTipprep()
  {
    return (Number)getAttributeInternal(TIPPREP);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Tipprep
   */
  public void setTipprep(Number value)
  {
    setAttributeInternal(TIPPREP, value);
  }

  /**
   * 
   *  Creates a Key object based on given key constituents
   */
  public static Key createPrimaryKey(String idart)
  {
    return new Key(new Object[] {idart});
  }























}