package es.sysmap.interflex.model.dmc;

import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class SgacdocEntradesViewRowImpl extends SgacdocViewRowImpl implements es.sysmap.interflex.model.dmc.common.SgacdocEntradesViewRow   
{
;


;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
  public static final int MAXATTRCONST = oracle.jbo.server.ViewDefImpl.getMaxAttrConst("es.sysmap.interflex.model.dmc.SgacdocView");;
  public static final int SGALDOCENTRADESVIEW = MAXATTRCONST;
  public static final int SGABULTOVIEW1 = MAXATTRCONST + 1;
  public static final int SGARESMATVIEW = MAXATTRCONST + 2;
  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public SgacdocEntradesViewRowImpl()
  {
  }

  /**
   * 
   *  Gets Sgacdoc entity object.
   */
  public es.sysmap.interflex.model.bdc.SgacdocImpl getSgacdoc()
  {
    return (es.sysmap.interflex.model.bdc.SgacdocImpl)getEntity(0);
  }


  /**
   * 
   *  getAttrInvokeAccessor: generated method. Do not modify.
   */
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception
  {
    if (index == SGALDOCENTRADESVIEW)
    {
      return getSgaldocEntradesView();
    }
    if (index == SGABULTOVIEW1)
    {
      return getSgabultoView1();
    }
    if (index == SGARESMATVIEW)
    {
      return getSgaresmatView();
    }
    return super.getAttrInvokeAccessor(index, attrDef);
  }

  /**
   * 
   *  setAttrInvokeAccessor: generated method. Do not modify.
   */
  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception
  {
    super.setAttrInvokeAccessor(index, value, attrDef);
    return;
  }
  
  /**
   * Actualitza els estats dels detalls del bulto
   * segons el tipus d'estat passat com a parametre
   */
  public void actualitzarOrdre(String estat, String puesto)
  {
    // Si posem l'ordre en procés,s'actulitza l'estat de l'ordre a 'D' (per si 
    // de cas abans era suspesa) i també el de les linies
    if (estat.equals("P"))
    {
      RowIterator bultos = this.getSgabultoView1();
      bultos.reset();
      while (bultos.hasNext())
      {
        SgabultoViewRowImpl bulto = (SgabultoViewRowImpl)bultos.next();
        if (bulto.getIdpuesto() == null || bulto.getIdpuesto().equals(puesto))
        {
          bulto.actualitzarBulto(estat, puesto);            
        }
      }
      // Posem l'estat a disponible (per si de cas)
      setEstado("D");
    }
    else // En qualsevol altre cas, unicament actualitzem l'estat de l'ordre 
    {
      setEstado(estat);
    }
  }


  /**
   * 
   *  Gets the associated <code>RowIterator</code> using master-detail link SgabultoView1
   */
  public RowIterator getSgabultoView1()
  {
    return (RowIterator)getAttributeInternal(SGABULTOVIEW1);
  }

  /**
   * 
   *  Gets the associated <code>RowIterator</code> using master-detail link SgaresmatView
   */
  public RowIterator getSgaresmatView()
  {
    return (RowIterator)getAttributeInternal(SGARESMATVIEW);
  }

  /**
   * 
   *  Gets the associated <code>RowIterator</code> using master-detail link SgaldocEntradesView
   */
  public RowIterator getSgaldocEntradesView()
  {
    return (RowIterator)getAttributeInternal(SGALDOCENTRADESVIEW);
  }



}