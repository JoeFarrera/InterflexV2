package es.sysmap.interflex.model.dmc;
import es.sysmap.interflex.etiquetes.EtiquetaPicking;
import es.sysmap.interflex.model.bdc.common.FlexiDate;
import java.text.DecimalFormat;
import javax.swing.DefaultListModel;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Date;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class SgabultoViewRowImpl extends ViewRowImpl implements es.sysmap.interflex.model.dmc.common.SgabultoViewRow 
{


  public static final int IDDOC = 0;
  public static final int IDBULTO = 1;
  public static final int PESO = 2;
  public static final int DETALLES = 3;
  public static final int IDPUESTO = 4;
  public static final int ESTADO = 5;
  public static final int DESCESTADO = 6;
  public static final int IMPRIMIR = 7;
  public static final int IDTIPOBULTO = 8;
  public static final int ALTO = 9;
  public static final int ANCHO = 10;
  public static final int LARGO = 11;
  public static final int PESOCONT = 12;
  public static final int RAMONEDACB = 13;
  public static final int SGACDOCVIEW = 14;
  public static final int SGALBULTOVIEW = 15;
  public static final int SGALDOCENTRADESVIEW = 16;
  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public SgabultoViewRowImpl()
  {
  }

  /**
   * 
   *  Gets Sgabulto entity object.
   */
  public es.sysmap.interflex.model.bdc.SgabultoImpl getSgabulto()
  {
    return (es.sysmap.interflex.model.bdc.SgabultoImpl)getEntity(0);
  }

  /**
   * 
   *  Gets the attribute value for IDBULTO using the alias name Idbulto
   */
  public Number getIdbulto()
  {
    return (Number)getAttributeInternal(IDBULTO);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDBULTO using the alias name Idbulto
   */
  public void setIdbulto(Number value)
  {
    setAttributeInternal(IDBULTO, value);
  }

  /**
   * 
   *  Gets the attribute value for PESO using the alias name Peso
   */
  public Number getPeso()
  {
    return (Number)getAttributeInternal(PESO);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for PESO using the alias name Peso
   */
  public void setPeso(Number value)
  {
    setAttributeInternal(PESO, value);
  }




  /**
   * 
   *  getAttrInvokeAccessor: generated method. Do not modify.
   */
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case IDDOC:
        return getIddoc();
      case IDBULTO:
        return getIdbulto();
      case PESO:
        return getPeso();
      case DETALLES:
        return getDetalles();
      case IDPUESTO:
        return getIdpuesto();
      case ESTADO:
        return getEstado();
      case DESCESTADO:
        return getDescestado();
      case IMPRIMIR:
        return getImprimir();
      case IDTIPOBULTO:
        return getIdtipobulto();
      case ALTO:
        return getAlto();
      case ANCHO:
        return getAncho();
      case LARGO:
        return getLargo();
      case PESOCONT:
        return getPesocont();
      case RAMONEDACB:
        return getRamonedacb();
      case SGALBULTOVIEW:
        return getSgalbultoView();
      case SGALDOCENTRADESVIEW:
        return getSgaldocEntradesView();
      case SGACDOCVIEW:
        return getSgacdocView();
      default:
        return super.getAttrInvokeAccessor(index, attrDef);
      }
  }

  /**
   * 
   *  setAttrInvokeAccessor: generated method. Do not modify.
   */
  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case IDDOC:
        setIddoc((Number)value);
        return;
      case IDBULTO:
        setIdbulto((Number)value);
        return;
      case IDPUESTO:
        setIdpuesto((String)value);
        return;
      case IMPRIMIR:
        setImprimir((String)value);
        return;
      case IDTIPOBULTO:
        setIdtipobulto((String)value);
        return;
      case ALTO:
        setAlto((Number)value);
        return;
      case ANCHO:
        setAncho((Number)value);
        return;
      case LARGO:
        setLargo((Number)value);
        return;
      case PESOCONT:
        setPesocont((Number)value);
        return;
      case RAMONEDACB:
        setRamonedacb((String)value);
        return;
      default:
        super.setAttrInvokeAccessor(index, value, attrDef);
        return;
      }
  }

  /**
   * 
   *  Gets the attribute value for IDDOC using the alias name Iddoc
   */
  public Number getIddoc()
  {
    return (Number)getAttributeInternal(IDDOC);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDDOC using the alias name Iddoc
   */
  public void setIddoc(Number value)
  {
    setAttributeInternal(IDDOC, value);
  }

  /**
   * 
   *  Gets the attribute value for DETALLES using the alias name Detalles
   */
  public Number getDetalles()
  {
    return (Number)getAttributeInternal(DETALLES);
  }



  /**
   * 
   *  Gets the attribute value for IDPUESTO using the alias name Idpuesto
   */
  public String getIdpuesto()
  {
    return (String)getAttributeInternal(IDPUESTO);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDPUESTO using the alias name Idpuesto
   */
  public void setIdpuesto(String value)
  {
    setAttributeInternal(IDPUESTO, value);
  }
  
  /**
   * Actualitza els estats dels detalls del bulto
   * segons el tipus d'estat passat com a parametre
   */
  public void actualitzarBulto(String estat, String puesto)
  {
    RowIterator rows = getSgaldocEntradesView();
    rows.reset();
    while (rows.hasNext())
    {
      SgaldocEntradesViewRowImpl detall = (SgaldocEntradesViewRowImpl)rows.next();
      //Pot ser que lbulto ja estigui finalitzada o anulada
//  Michael 18.01.2007     if (!(detall.getEstadobulto().equals("F") && detall.getEstadobulto().equals("A"))) 
      if (!detall.getEstadobulto().equals("F") && !detall.getEstadobulto().equals("A")) 
        detall.setEstadobulto(estat);
    }
    
    if (estat.equals("P"))
      setIdpuesto(puesto);
    
  }

  /**
   * 
   *  Retorna un estat global pel bulto en funció de l'estat de les linies del 
   *  bulto
   */
  public String getEstado()
  {
    String estado = "F";
    RowIterator ldocs = getSgaldocEntradesView();
    ldocs.reset();
    
    while (ldocs.hasNext() && !estado.equals("N"))
    {
      SgaldocEntradesViewRowImpl ldoc = (SgaldocEntradesViewRowImpl)ldocs.next();
      switch(ldoc.getEstadobulto().charAt(0))
      {
        case 'N':
        case 'P':
        {
          estado = ldoc.getEstadobulto();
          break;
        }
        case 'S':
        {
          if (estado.equals("F"))
            estado = ldoc.getEstadobulto();
          break;
        }
        case 'A':
        case 'F':
      }
    }
    return estado;
/*    String estado = "N";
    RowIterator ldocs = getSgaldocEntradesView();
    ldocs.reset();
    
    while (ldocs.hasNext() && !estado.equals("P"))
    {
      SgaldocEntradesViewRowImpl ldoc = (SgaldocEntradesViewRowImpl)ldocs.next();
      switch(ldoc.getEstadobulto().charAt(0))
      {
        case 'N':
        {
          if (!estado.equals("N"))
            estado = "P";
          break;
        }
        case 'P':
        {
          estado = ldoc.getEstadobulto();
          break;
        }
        case 'S':
        {
          if (estado.equals("N") || estado.equals("A") || estado.equals("F"))
            estado = ldoc.getEstadobulto();
          break;
        }
        case 'A':
        case 'F':
        {
          if (estado.equals("N"))
            estado = ldoc.getEstadobulto();
          break;
        }
      }
    }*/
    
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Estado
   */
  public void setEstado(String value)
  {
    setAttributeInternal(ESTADO, value);
  }


  /**
   * 
   *  Gets the attribute value for the calculated attribute Descestado
   */
  public String getDescestado()
  {
    String queryResult = getApplicationModule().getTransaction().
                    dumpQueryResult("select abbreviation from sgarefcodes where " +
                    "domain ='ESTORD' and value='"+
                          getEstado() +"'", "oracle.jbo.server.QueryDumpTab",
                          null);
    int n = queryResult.indexOf("\n")+1;
    return(queryResult.substring(n).trim());
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for the calculated attribute Descestado
   */
  public void setDescestado(String value)
  {
    setAttributeInternal(DESCESTADO, value);
  }


  /**
   * Retorna l'estat de la capçalera a la que pertany el bulto
   * @return 
   */
  public String getEstadoCabecera()
  {
    SgacdocViewRowImpl cdoc = (SgacdocViewRowImpl)getSgacdocView(); 
    // Estadolineas es una combinació de l'estat de la capçalera i de les seves
    // linies
    return cdoc.getEstadolineas();
  }

  /**
   * 
   *  Gets the associated <code>Row</code> using master-detail link SgacdocView
   */
  public oracle.jbo.Row getSgacdocView()
  {
    return (oracle.jbo.Row)getAttributeInternal(SGACDOCVIEW);
  }
  
  /**
   * Retorna la llista sencera de linies de bulto
   * @return 
   */
  //TODO: No se si es gaire correcte retornar un DefaultListModel desde BC4J
  public DefaultListModel getLlistaBulto()
  {
    return(getSgabulto().getLlistaBulto());
  }

  /**
   * 
   *  Gets the associated <code>RowIterator</code> using master-detail link SgalbultoView
   */
  public RowIterator getSgalbultoView()
  {
    return (RowIterator)getAttributeInternal(SGALBULTOVIEW);
  }

  /**
   * 
   *  Gets the associated <code>RowIterator</code> using master-detail link SgaldocEntradesView
   */
  public RowIterator getSgaldocEntradesView()
  {
    return (RowIterator)getAttributeInternal(SGALDOCENTRADESVIEW);
  }
  
  /**
   * Afegeix el material de sortida al bulto en una nova linia de lbulto
   * Crida a la funció de l'entitat amb el mateix nom
   * @param cantot
   * @param idart
   * @param idlin
   */
  public void afegirABultoSortida(Number idlin, String idart, Number cantot, Number pes, boolean absolut)
  {
    getSgabulto().afegirABultoSortida(idlin, idart, cantot, pes, absolut);
  }  
  
  /**
   * Treu la linea de bulto del bulto
   * Crida a la funció de l'entitat amb el mateix nom
   * @param cantot
   * @param idart
   * @param idlin
   */
  public void treureDeBultoSortida(Number idlin)
  {
    getSgabulto().treureDeBultoSortida(idlin);
  }  

  /**
   * Modifica la quantitat de la línia del bulto
   * 
   */
   public void modCantLineaBultoSortida(Number idlin, int cantTreta)
   {
     getSgabulto().modCantLineaBultoSortida(idlin, cantTreta);
   }
   
  /**
   * 
   *  Gets the attribute value for IMPRIMIR using the alias name Imprimir
   */
  public String getImprimir()
  {
    return (String)getAttributeInternal(IMPRIMIR);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IMPRIMIR using the alias name Imprimir
   */
  public void setImprimir(String value)
  {
    setAttributeInternal(IMPRIMIR, value);
  }
 
 
  private String getRamonedaBarcode()
  {
    return getSgabulto().getRamonedaBarcode();
  }
 
  /**
   * Posa les dades necessaries per fer l'etiqueta dins l'estructura de dades
   * @return 
   */
  
  public EtiquetaPicking getDadesEtiqueta()
  {
    EtiquetaPicking etiqueta = null;
    // Michael 02.10.2009 Better to propogate the exception
//    try
    {
      SgacdocViewRowImpl cdoc = (SgacdocViewRowImpl)getSgacdocView();
      etiqueta = new EtiquetaPicking();
      etiqueta.setIdBulto(getIdbulto().toString());
      etiqueta.setIdConsignatari(cdoc.getCcliente().toString());
      etiqueta.setNomConsignatari(cdoc.getNombre());
      etiqueta.setAdreçaConsignatari_1(cdoc.getDireccion());
      etiqueta.setAdreçaConsignatari_2(cdoc.getCodpostal() + " " + cdoc.getPoblacion());
      etiqueta.setAdreçaConsignatari_3(cdoc.getProvincia());
      etiqueta.setData(FlexiDate.currentDate().toSimpleDateStringFormat());
      String talbaran = (cdoc.getTalbaran() != null) ? cdoc.getTalbaran() : "";
      String nalbaran = (cdoc.getNalbaran() != null) ? cdoc.getNalbaran() : "";
      // Michael 25.11.2016 etiqueta.setAlbara(talbaran + " " + nalbaran);
      // Michael 25.11.2016 només nalbaran a partir d'ara
      etiqueta.setAlbara(nalbaran);
      etiqueta.setAlbara_barras(nalbaran);
      // Michael 29.03.2006 fin
      etiqueta.setPorts(cdoc.getPortes());
      etiqueta.setTransportista(cdoc.getTransporte());
      etiqueta.setPes(getPeso().toString());
      
      // Michael 09.02.2006 Incorporar datos del código de barras, si lo tiene
      if (cdoc.hasEtiquetaBarras())
      {
        etiqueta.setEtiquetaBarras(true);
        etiqueta.setEti_cli_redur(cdoc.getEtiCliRedur());
        etiqueta.setEti_cod_postal(cdoc.getEtiCodPostal());
        etiqueta.setEti_plaza(cdoc.getEtiPlaza());
        etiqueta.setEti_tipo_cb(cdoc.getEtiTipoCb());
        etiqueta.setEti_pais_origen(cdoc.getEtiPaisOrigen());
        etiqueta.setEti_pais_destino(cdoc.getEtiPaisDestino());
        // Michael 09.10.2006
        etiqueta.setTelefono(cdoc.getTelefono());
      }
      else
      {
        etiqueta.setEtiquetaBarras(false);
        // Michael 23.09.2009 quizas etiqueta Ochoa
        if (cdoc.isOchoa())
        {
          etiqueta.setOchoaExped(cdoc.getExpedOchoa());
          // TODO get rest of Ochoa fields here from new table for Ochoa...
          AppModuleImpl appModule = (AppModuleImpl)getApplicationModule();
          SgaochoaViewRowImpl ochoaRow = appModule.getSgaochoaViewRowImpl(cdoc.getCodpostal());
          if (ochoaRow !=  null)
          {
            etiqueta.setOchoaEncaminamiento(ochoaRow.getPlazaDestino());
            etiqueta.setOchoaZona(ochoaRow.getZonaRep());
            etiqueta.setOchoaCodigoPlazaDest(ochoaRow.getCodPlazaDest3());
            etiqueta.setOchoaCodigoPostal(cdoc.getCodpostal());
            etiqueta.setEtiquetaOchoa(true);
          }
        // Michael 27.10.2010
        etiqueta.setTelefono(cdoc.getTelefono());  
        }
        else if (cdoc.isRedur())
        {
          AppModuleImpl appModule = (AppModuleImpl)getApplicationModule();
          SgaredurViewRowImpl redurRow = appModule.getSgaredurViewRowImpl(cdoc.getCodpostal());
          etiqueta.setRedurPlaza(redurRow.getPlaza());
          etiqueta.setRedurProvincia(redurRow.getProvincia());
          etiqueta.setRedurCodigoPostal(cdoc.getCodpostal());
          etiqueta.setRedurNAlbaranNumeric(cdoc.getNalbaranNumeric());
          etiqueta.setEtiquetaRedur(true);
          
          etiqueta.setTelefono(cdoc.getTelefono()); 
          
        }
        else if (cdoc.isRamoneda())
        {
          AppModuleImpl appModule = (AppModuleImpl)getApplicationModule();
          String nombreRuta = appModule.getRamonedaNombreRuta(cdoc.getCodpostal());
          etiqueta.setRamonedaRuta(nombreRuta);

          etiqueta.setRamonedaContador(cdoc.getExpedRamoneda());
          etiqueta.setRamonedaCodigoPostal(cdoc.getCodpostal());
          
          
      

          etiqueta.setRamonedaBarcodeString(getRamonedaBarcode());
          // TODO - store this with the bulto as it will be used...
          etiqueta.setEtiquetaRamoneda(true);
        }
      }
    }
//    catch(Exception ex)
//    {
//      etiqueta = null;
//    }
    
    return etiqueta;
  }

  /**
   * 
   *  Gets the attribute value for IDTIPOBULTO using the alias name Idtipobulto
   */
  public String getIdtipobulto()
  {
    return (String)getAttributeInternal(IDTIPOBULTO);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for IDTIPOBULTO using the alias name Idtipobulto
   */
  public void setIdtipobulto(String value)
  {
    setAttributeInternal(IDTIPOBULTO, value);
  }

  /**
   * 
   *  Gets the attribute value for ALTO using the alias name Alto
   */
  public Number getAlto()
  {
    return (Number)getAttributeInternal(ALTO);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for ALTO using the alias name Alto
   */
  public void setAlto(Number value)
  {
    setAttributeInternal(ALTO, value);
  }

  /**
   * 
   *  Gets the attribute value for ANCHO using the alias name Ancho
   */
  public Number getAncho()
  {
    return (Number)getAttributeInternal(ANCHO);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for ANCHO using the alias name Ancho
   */
  public void setAncho(Number value)
  {
    setAttributeInternal(ANCHO, value);
  }

  /**
   * 
   *  Gets the attribute value for LARGO using the alias name Largo
   */
  public Number getLargo()
  {
    return (Number)getAttributeInternal(LARGO);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for LARGO using the alias name Largo
   */
  public void setLargo(Number value)
  {
    setAttributeInternal(LARGO, value);
  }

  /**
   * 
   *  Gets the attribute value for PESOCONT using the alias name Pesocont
   */
  public Number getPesocont()
  {
    return (Number)getAttributeInternal(PESOCONT);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for PESOCONT using the alias name Pesocont
   */
  public void setPesocont(Number value)
  {
    setAttributeInternal(PESOCONT, value);
  }

  /**
   * 
   *  Gets the attribute value for RAMONEDACB using the alias name Ramonedacb
   */
  public String getRamonedacb()
  {
    return (String)getAttributeInternal(RAMONEDACB);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for RAMONEDACB using the alias name Ramonedacb
   */
  public void setRamonedacb(String value)
  {
    setAttributeInternal(RAMONEDACB, value);
  }


  
}