package es.sysmap.interflex.model.bdc;
import java.sql.ResultSet;
import java.sql.SQLException;
import oracle.jbo.ApplicationModule;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.domain.Number;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class SgaarticuloDefImpl extends EntityDefImpl 
{
  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public SgaarticuloDefImpl()
  {
  }
  
  /**
   * Inserta una referencia provinent del host
   * @return 
   * @param referencia
   * @param iddoc
   * @param txn
   */

  public String insertarReferencia(DBTransaction txn, 
                                   ResultSet referencia) 
  {
    String motivo = null;
    try
    {
      String idartif = referencia.getString("ref_id_anterior").trim();
      if (articuloExist(txn, idartif) == null)
      {
        SgaarticuloImpl articulo = (SgaarticuloImpl)super.createInstance(txn, null);
        motivo = articulo.insertarReferencia(referencia);
      }
      else
        motivo = "Referencia existent";
    }
    catch(SQLException ex)
    {
      motivo = ex.getMessage();
    }
    return motivo;
  }  


  /**
   * Actualitza una referencia provinent del host
   * @return 
   * @param referencia
   * @param iddoc
   * @param txn
   */

  public String actualitzarReferencia(DBTransaction txn, 
                                   ResultSet referencia) 
  {
    String motivo = null;
    try
    {
      String idartif = referencia.getString("ref_id_anterior").trim();
      Row row = articuloExist(txn, idartif);
      if (row != null)
      {
        Object [] obj = {(String)row.getAttribute("Idart")};
        Key key = new Key(obj); 
        SgaarticuloImpl articulo = (SgaarticuloImpl)findByPrimaryKey(txn, key);
        if (articulo != null)
        {
          motivo = articulo.actualitzarReferencia(referencia);
        }
      }
      else
        motivo = "Referencia inexistent";
    }
    catch(SQLException ex)
    {
      motivo = ex.getMessage();
    }
    return motivo;
  }  


  public String eliminarReferencia(DBTransaction txn, 
                                   ResultSet referencia) 
  {
    String motivo = null;
    try
    {
      // Michael 23.09.2009 No se esta mirando si hay existencias?? OK - Throws exception
      String idartif = referencia.getString("ref_id_anterior").trim();
      Row row = articuloExist(txn, idartif);
      if (row != null)
      {
        Object [] obj = {(String)row.getAttribute("Idart")};
        Key key = new Key(obj); 
        SgaarticuloImpl articulo = (SgaarticuloImpl)findByPrimaryKey(txn, key);
        // Actualització
        SgastockDefImpl stock = (SgastockDefImpl)SgastockImpl.getDefinitionObject();
        stock.actualitzarStock(txn, articulo.getIdart(), "B");
        articulo.remove();
      }
      else
        motivo = "Referencia inexistent";
    }
    catch(SQLException ex)
    {
      motivo = ex.getMessage();
    }
    return motivo;
  }  
  

  private Row articuloExist(DBTransaction txn, String idartif)
  {
    Row row = null;
    ViewObject vo = getArticuloExistView(txn);
    if (vo != null)
    {
      vo.setWhereClauseParam(0, idartif);
      vo.setForwardOnly(true);
      vo.executeQuery();
      return vo.first();
    }
    return row;
  }


  private ViewObject getArticuloExistView(DBTransaction txn)
  {
    ApplicationModule root = txn.getRootApplicationModule();
    return(root.findViewObject("SgaarticuloExistView1"));
  }
}