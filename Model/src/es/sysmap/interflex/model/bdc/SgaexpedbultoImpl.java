package es.sysmap.interflex.model.bdc;
import es.sysmap.interflex.model.dmc.AppModuleImpl;
import es.sysmap.interflex.model.dmc.SgatipobultoParamViewRowImpl;
import java.sql.SQLException;
import javax.swing.DefaultListModel;
import oracle.jbo.Row;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.server.ViewRowImpl;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class SgaexpedbultoImpl extends EntityImpl 
{
  public static final int IDEXPED = 0;
  public static final int IDBULTO = 1;
  public static final int IDBULTOORI = 2;
  public static final int LARGO = 3;
  public static final int ANCHO = 4;
  public static final int ALTO = 5;
  public static final int CREATEDBY = 6;
  public static final int CREATEDON = 7;
  public static final int IDTIPOBULTO = 8;
  public static final int MODIFIEDBY = 9;
  public static final int MODIFIEDON = 10;
  public static final int PESOCONT = 11;
  public static final int SGAEXPED = 12;
  public static final int SGAEXPEDLBULTO = 13;
  public static final int SGAEXPEDLBULTO1 = 14;












  private static EntityDefImpl mDefinitionObject;

  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public SgaexpedbultoImpl()
  {
  }

  /**
   * 
   *  Retrieves the definition object for this instance class.
   */
  public static synchronized EntityDefImpl getDefinitionObject()
  {
    if (mDefinitionObject == null)
    {
      mDefinitionObject = (EntityDefImpl)EntityDefImpl.findDefObject("es.sysmap.interflex.model.bdc.Sgaexpedbulto");
    }
    return mDefinitionObject;
  }













  /**
   * 
   *  Gets the attribute value for Idexped, using the alias name Idexped
   */
  public Number getIdexped()
  {
    return (Number)getAttributeInternal(IDEXPED);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Idexped
   */
  public void setIdexped(Number value)
  {
    setAttributeInternal(IDEXPED, value);
  }

  /**
   * 
   *  Gets the attribute value for Idbulto, using the alias name Idbulto
   */
  public Number getIdbulto()
  {
    return (Number)getAttributeInternal(IDBULTO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Idbulto
   */
  public void setIdbulto(Number value)
  {
    setAttributeInternal(IDBULTO, value);
  }

  /**
   * 
   *  Gets the attribute value for IdbultoOri, using the alias name IdbultoOri
   */
  public Number getIdbultoOri()
  {
    return (Number)getAttributeInternal(IDBULTOORI);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for IdbultoOri
   */
  public void setIdbultoOri(Number value)
  {
    setAttributeInternal(IDBULTOORI, value);
  }

  /**
   * 
   *  getAttrInvokeAccessor: generated method. Do not modify.
   */
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case IDEXPED:
        return getIdexped();
      case IDBULTO:
        return getIdbulto();
      case IDBULTOORI:
        return getIdbultoOri();
      case LARGO:
        return getLargo();
      case ANCHO:
        return getAncho();
      case ALTO:
        return getAlto();
      case CREATEDBY:
        return getCreatedby();
      case CREATEDON:
        return getCreatedon();
      case IDTIPOBULTO:
        return getIdtipobulto();
      case MODIFIEDBY:
        return getModifiedby();
      case MODIFIEDON:
        return getModifiedon();
      case PESOCONT:
        return getPesocont();
      case SGAEXPEDLBULTO:
        return getSgaexpedlbulto();
      case SGAEXPEDLBULTO1:
        return getSgaexpedlbulto1();
      case SGAEXPED:
        return getSgaexped();
      default:
        return super.getAttrInvokeAccessor(index, attrDef);
      }
  }

  /**
   * 
   *  setAttrInvokeAccessor: generated method. Do not modify.
   */
  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case IDEXPED:
        setIdexped((Number)value);
        return;
      case IDBULTO:
        setIdbulto((Number)value);
        return;
      case IDBULTOORI:
        setIdbultoOri((Number)value);
        return;
      case LARGO:
        setLargo((Number)value);
        return;
      case ANCHO:
        setAncho((Number)value);
        return;
      case ALTO:
        setAlto((Number)value);
        return;
      case IDTIPOBULTO:
        setIdtipobulto((String)value);
        return;
      case PESOCONT:
        setPesocont((Number)value);
        return;
      default:
        super.setAttrInvokeAccessor(index, value, attrDef);
        return;
      }
  }


  /**
   * 
   *  Gets the associated entity SgaexpedImpl
   */
  public SgaexpedImpl getSgaexped()
  {
    return (SgaexpedImpl)getAttributeInternal(SGAEXPED);
  }

  /**
   * 
   *  Sets <code>value</code> as the associated entity SgaexpedImpl
   */
  public void setSgaexped(SgaexpedImpl value)
  {
    setAttributeInternal(SGAEXPED, value);
  }


  /**
   * 
   *  Gets the associated entity oracle.jbo.RowIterator
   */
  public RowIterator getSgaexpedlbulto()
  {
    return (RowIterator)getAttributeInternal(SGAEXPEDLBULTO);
  }


  /**
   * 
   *  Gets the attribute value for Largo, using the alias name Largo
   */
  public Number getLargo()
  {
    return (Number)getAttributeInternal(LARGO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Largo
   */
  public void setLargo(Number value)
  {
    setAttributeInternal(LARGO, value);
  }

  /**
   * 
   *  Gets the attribute value for Ancho, using the alias name Ancho
   */
  public Number getAncho()
  {
    return (Number)getAttributeInternal(ANCHO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Ancho
   */
  public void setAncho(Number value)
  {
    setAttributeInternal(ANCHO, value);
  }

  /**
   * 
   *  Gets the attribute value for Alto, using the alias name Alto
   */
  public Number getAlto()
  {
    return (Number)getAttributeInternal(ALTO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Alto
   */
  public void setAlto(Number value)
  {
    setAttributeInternal(ALTO, value);
  }

  /**
   * 
   *  Gets the attribute value for Createdby, using the alias name Createdby
   */
  public String getCreatedby()
  {
    return (String)getAttributeInternal(CREATEDBY);
  }

  /**
   * 
   *  Gets the attribute value for Createdon, using the alias name Createdon
   */
  public Date getCreatedon()
  {
    return (Date)getAttributeInternal(CREATEDON);
  }

  /**
   * 
   *  Gets the attribute value for Idtipobulto, using the alias name Idtipobulto
   */
  public String getIdtipobulto()
  {
    return (String)getAttributeInternal(IDTIPOBULTO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Idtipobulto
   */
  public void setIdtipobulto(String value)
  {
    setAttributeInternal(IDTIPOBULTO, value);
  }

  /**
   * 
   *  Gets the attribute value for Modifiedby, using the alias name Modifiedby
   */
  public String getModifiedby()
  {
    return (String)getAttributeInternal(MODIFIEDBY);
  }

  /**
   * 
   *  Gets the attribute value for Modifiedon, using the alias name Modifiedon
   */
  public Date getModifiedon()
  {
    return (Date)getAttributeInternal(MODIFIEDON);
  }

  /**
   * 
   *  Gets the attribute value for Pesocont, using the alias name Pesocont
   */
  public Number getPesocont()
  {
    return (Number)getAttributeInternal(PESOCONT);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Pesocont
   */
  public void setPesocont(Number value)
  {
    setAttributeInternal(PESOCONT, value);
  }


  /**
   * 
   *  Gets the associated entity oracle.jbo.RowIterator
   */
  public RowIterator getSgaexpedlbulto1()
  {
    return (RowIterator)getAttributeInternal(SGAEXPEDLBULTO1);
  }


 public DefaultListModel getLlistaBulto()
  {
    DefaultListModel listModel = new DefaultListModel();
    RowIterator rows = getSgaexpedlbulto();
    rows.reset();
    while (rows.hasNext())
    {
      SgaexpedlbultoImpl lbulto = (SgaexpedlbultoImpl)rows.next();
      listModel.addElement(lbulto.getIdcabnum() + " " +
        lbulto.getIdlin() + ":" + lbulto.getIdartif() + ":"  
        + lbulto.getCantot() + ":" + ((lbulto.getPeso() != null) ? lbulto.getPeso() : new Number(0))
        + ":" + lbulto.getIddoc() + ":" + lbulto.getIdlin());
    }
    return listModel;
  }
  
   /**
   * Afegeix el material de sortida al bulto en una nova linia de lbulto, o a
   * una ja existent amb la mateixa clau
   * @param cantot
   * @param idart
   * @param idlin
   */
  public void afegirABultoSortida(Number iddoc, Number idlin, String idart, Number cantot, Number pes, boolean absolut)
  {
    Object [] obj = {getIdexped(), getIdbulto(), iddoc, idlin};
    Key key = new Key(obj);
    Row [] rows = getSgaexpedlbulto().findByKey(key, 1);
    if (rows != null && rows.length > 0)
    {
      SgaexpedlbultoImpl lbulto = (SgaexpedlbultoImpl)((ViewRowImpl)rows[0]).getEntity(0);  
      if (!absolut)
      {
        // cantidades parciales
        lbulto.setCantot(lbulto.getCantot().add(cantot));     
        lbulto.setPeso(lbulto.getPeso().add(pes));
      }
      else
      {
        // cantidades totales
        lbulto.setCantot(cantot);     
        lbulto.setPeso(pes);

      }
      // Retrieve cantot, may be needed below
      cantot = lbulto.getCantot();

    }
    else
    {
      SgaexpedlbultoImpl noulbulto = (SgaexpedlbultoImpl)getSgaexpedlbulto().createRow();
      noulbulto.setIdexped(getIdexped());
      noulbulto.setIddoc(iddoc);
      noulbulto.setIdlin(idlin);
      noulbulto.setCantot(cantot);
      noulbulto.setPeso(pes);
      
    
      getSgaexpedlbulto().insertRow(noulbulto);
      
      // Michael: Ja no correspond amb el bulto original
      setIdbultoOri(null);
      
      
    }
      // Veure si podem trobar tipus d'embalum, dimensions, i pes per comanda d'export,
//      SgacdocImpl cdoc = getSgacdoc();
//      if (cdoc.isExport()) 
//      {
//          AppModuleImpl appModule = (AppModuleImpl)getDBTransaction().getRootApplicationModule();
//          
//          SgatipobultoParamViewRowImpl row = appModule.getSgatipobultoRow(idart, cantot);
//          if (row != null) 
//          {
//            setAlto(row.getAlto());
//            setAncho(row.getAncho());
//            setLargo(row.getLargo());
//            setPesocont(row.getPeso());
//            setIdtipobulto(row.getIdtip());
//          }
//          
//      }

  }
  
   /**
   * Treu la linea de bulto del bulto
   * @param idlin
   */
  public void treureDeBultoSortida(Number iddoc, Number idlin)
  {
    Object [] obj = {getIdexped(), getIdbulto(), iddoc, idlin};
    Key key = new Key(obj);
    Row [] rows = getSgaexpedlbulto().findByKey(key, 1);
    if (rows != null && rows.length > 0)
    {
      SgaexpedlbultoImpl lbulto = (SgaexpedlbultoImpl)((ViewRowImpl)rows[0]).getEntity(0);  
      lbulto.remove();
    }
    
    
    // Si no queden lbultos, esborrem el bulto
    if (getSgaexpedlbulto().getRowCount() == 0)
      remove();
  }

 public void modCantLineaBultoSortida (Number iddoc, Number idlin, int cantTreta, Number pes)
  {
     Object [] obj = {getIdexped(), getIdbulto(),  iddoc, idlin};
      Key key = new Key(obj);
      Row [] rows = getSgaexpedlbulto().findByKey(key, 1);
      if (rows != null && rows.length > 0)
      {
        SgaexpedlbultoImpl lbulto = (SgaexpedlbultoImpl)((ViewRowImpl)rows[0]).getEntity(0);  
        if (lbulto.getCantot().intValue() <= cantTreta)
        {
          lbulto.remove();
          if (getSgaexpedlbulto().getRowCount() == 0)
            remove();
      }
      else
        {
          int cantTotal = lbulto.getCantot().intValue();
          int newCant = cantTotal - cantTreta;
          lbulto.setCantot(new Number(lbulto.getCantot().intValue() - cantTreta));
          lbulto.setPeso(lbulto.getPeso().subtract(pes));

        }
      }
    
  }


    public static double round2(double num) {
    double result = num * 100;
    result = Math.round(result);
    result = result / 100;
    return result;
}

  /**
   * 
   *  Creates a Key object based on given key constituents
   */
  public static Key createPrimaryKey(Number idexped, Number idbulto)
  {
    return new Key(new Object[] {idexped, idbulto});
  }
  

}